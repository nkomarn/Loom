--- a/net/minecraft/block/entity/BeaconBlockEntity.java
+++ b/net/minecraft/block/entity/BeaconBlockEntity.java
@@ -37,23 +37,38 @@
 import net.minecraft.util.math.Box;
 import net.minecraft.world.Heightmap;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionEffect;
+// CraftBukkit end
+
 public class BeaconBlockEntity extends BlockEntity implements NamedScreenHandlerFactory, Tickable {
 
     public static final StatusEffect[][] EFFECTS_BY_LEVEL = new StatusEffect[][]{{StatusEffects.SPEED, StatusEffects.HASTE}, {StatusEffects.RESISTANCE, StatusEffects.JUMP_BOOST}, {StatusEffects.STRENGTH}, {StatusEffects.REGENERATION}};
     private static final Set<StatusEffect> EFFECTS = (Set) Arrays.stream(BeaconBlockEntity.EFFECTS_BY_LEVEL).flatMap(Arrays::stream).collect(Collectors.toSet());
     private List<BeaconBlockEntity.BeamSegment> beamSegments = Lists.newArrayList();
     private List<BeaconBlockEntity.BeamSegment> field_19178 = Lists.newArrayList();
-    private int level;
+    public int level; // Loom - public access
     private int field_19179 = -1;
     @Nullable
-    private StatusEffect primary;
+    public StatusEffect primary; // Loom - public access
     @Nullable
-    private StatusEffect secondary;
+    public StatusEffect secondary; // Loom - public access
     @Nullable
-    private Text customName;
-    private ContainerLock lock;
+    public Text customName; // Loom - public access
+    public ContainerLock lock;  // Loom - public access
     private final PropertyDelegate propertyDelegate;
 
+    // CraftBukkit start - add fields and methods
+    public PotionEffect getPrimaryEffect() {
+        return (this.primary != null) ? CraftPotionUtil.toBukkit(new StatusEffectInstance(this.primary, getLevel(), getAmplification(), true, true)) : null;
+    }
+
+    public PotionEffect getSecondaryEffect() {
+        return (hasSecondaryEffect()) ? CraftPotionUtil.toBukkit(new StatusEffectInstance(this.secondary, getLevel(), getAmplification(), true, true)) : null;
+    }
+    // CraftBukkit end
+
     public BeaconBlockEntity() {
         super(BlockEntityType.BEACON);
         this.lock = ContainerLock.EMPTY;
@@ -216,39 +231,44 @@
         super.markRemoved();
     }
 
+    // CraftBukkit start - split into components
     private void applyPlayerEffects() {
         if (!this.world.isClient && this.primary != null) {
-            double d0 = (double) (this.level * 10 + 10);
-            byte b0 = 0;
-
-            if (this.level >= 4 && this.primary == this.secondary) {
-                b0 = 1;
+            byte amplification = getAmplification();
+            int effectLevel = getEffectLevel();
+            List<PlayerEntity> list = getHumansInRange();
+            this.applyEffect(list, this.primary, effectLevel, amplification);
+            if (this.hasSecondaryEffect()) {
+                this.applyEffect(list, this.secondary, effectLevel, 0);
             }
+        }
+    }
 
-            int i = (9 + this.level * 2) * 20;
-            Box box = (new Box(this.pos)).expand(d0).stretch(0.0D, (double) this.world.getHeight(), 0.0D);
-            List<PlayerEntity> list = this.world.getNonSpectatingEntities(PlayerEntity.class, box);
-            Iterator iterator = list.iterator();
-
-            PlayerEntity playerentity;
-
-            while (iterator.hasNext()) {
-                playerentity = (PlayerEntity) iterator.next();
-                playerentity.addStatusEffect(new StatusEffectInstance(this.primary, i, b0, true, true));
-            }
+    private byte getAmplification() {
+        return (this.level >= 4 && this.primary == this.secondary) ? (byte)1 : 0;
+    }
 
-            if (this.level >= 4 && this.primary != this.secondary && this.secondary != null) {
-                iterator = list.iterator();
+    private int getEffectLevel() {
+        return (9 + this.level * 2) * 20;
+    }
 
-                while (iterator.hasNext()) {
-                    playerentity = (PlayerEntity) iterator.next();
-                    playerentity.addStatusEffect(new StatusEffectInstance(this.secondary, i, 0, true, true));
-                }
-            }
+    public List<PlayerEntity> getHumansInRange() { // Loom - public access
+        double d0 = (double) (this.level * 10 + 10);
+        Box box = (new Box(this.pos)).expand(d0).stretch(0.0D, (double) this.world.getHeight(), 0.0D);
+        return this.world.getNonSpectatingEntities(PlayerEntity.class, box);
+    }
 
+    private void applyEffect(List<PlayerEntity> list, final StatusEffect effects, final int level, final int amplification) {
+        for (PlayerEntity playerEntity : list) {
+            playerEntity.addStatusEffect(new StatusEffectInstance(effects, level, amplification, true, true));
         }
     }
 
+    private boolean hasSecondaryEffect() {
+        return this.level >= 4 && this.primary != this.secondary && this.secondary != null;
+    }
+    // CraftBukkit end - split into components
+
     public void playSound(SoundEvent soundevent) {
         this.world.playSound((PlayerEntity) null, this.pos, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
     }
@@ -275,8 +295,11 @@
 
     public void fromTag(BlockState blockstate, CompoundTag compoundtag) {
         super.fromTag(blockstate, compoundtag);
-        this.primary = getPotionEffectById(compoundtag.getInt("Primary"));
-        this.secondary = getPotionEffectById(compoundtag.getInt("Secondary"));
+        // CraftBukkit start - persist manually set non-default beacon effects (SPIGOT-3598)
+        this.primary = StatusEffect.byRawId(compoundtag.getInt("Primary"));
+        this.secondary = StatusEffect.byRawId(compoundtag.getInt("Secondary"));
+        this.level = compoundtag.getInt("Levels"); // SPIGOT-5053, use where available
+        // CraftBukkit end
         if (compoundtag.contains("CustomName", 8)) {
             this.customName = Text.Serializer.fromJson(compoundtag.getString("CustomName"));
         }
