--- a/net/minecraft/block/entity/LecternBlockEntity.java
+++ b/net/minecraft/block/entity/LecternBlockEntity.java
@@ -24,10 +24,65 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec2f;
 import net.minecraft.util.math.Vec3d;
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.UUID;
+import org.bukkit.Location;
+import org.bukkit.block.Lectern;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
 
-public class LecternBlockEntity extends BlockEntity implements Clearable, NamedScreenHandlerFactory {
+public class LecternBlockEntity extends BlockEntity implements Clearable, NamedScreenHandlerFactory, CommandOutput { // CraftBukkit - ICommandListener
+
+    // CraftBukkit start - add fields and methods
+    public final Inventory inventory = new LecternInventory();
+
+    public class LecternInventory implements Inventory {
+
+        public List<HumanEntity> transaction = new ArrayList<>();
+        private int maxStack = 1;
+
+        @Override
+        public List<ItemStack> getContents() {
+            return Arrays.asList(book);
+        }
+
+        @Override
+        public void onOpen(CraftHumanEntity who) {
+            transaction.add(who);
+        }
+
+        @Override
+        public void onClose(CraftHumanEntity who) {
+            transaction.remove(who);
+        }
+
+        @Override
+        public List<HumanEntity> getViewers() {
+            return transaction;
+        }
+
+        @Override
+        public void setMaxStackSize(int i) {
+            maxStack = i;
+        }
+
+        @Override
+        public Location getLocation() {
+            return new Location(world.getCraftWorld(), pos.getX(), pos.getY(), pos.getZ());
+        }
+
+        @Override
+        public InventoryHolder getOwner() {
+            return (Lectern) LecternBlockEntity.this.getOwner();
+        }
+        // CraftBukkit end
 
-    private final Inventory inventory = new Inventory() {
         public int size() {
             return 1;
         }
@@ -66,10 +121,19 @@
             }
         }
 
-        public void setStack(int i, ItemStack itemstack) {}
+        public void setStack(int i, ItemStack itemstack) {
+            // CraftBukkit start
+            if (i == 0) {
+                LecternBlockEntity.this.setBook(itemstack);
+                if (LecternBlockEntity.this.getWorld() != null) {
+                    LecternBlock.setHasBook(LecternBlockEntity.this.getWorld(), LecternBlockEntity.this.getPos(), LecternBlockEntity.this.getCachedState(), LecternBlockEntity.this.hasBook());
+                }
+            }
+            // CraftBukkit end
+        }
 
         public int getMaxCountPerStack() {
-            return 1;
+            return maxStack; // CraftBukkit
         }
 
         public void markDirty() {
@@ -86,6 +150,7 @@
 
         public void clear() {}
     };
+
     private final PropertyDelegate propertyDelegate = new PropertyDelegate() {
         public int get(int i) {
             return i == 0 ? LecternBlockEntity.this.currentPage : 0;
@@ -144,7 +209,7 @@
         if (j != this.currentPage) {
             this.currentPage = j;
             this.markDirty();
-            LecternBlock.setPowered(this.getWorld(), this.getPos(), this.getCachedState());
+            if (this.world != null) LecternBlock.setPowered(this.getWorld(), this.getPos(), this.getCachedState());
         }
 
     }
@@ -167,6 +232,34 @@
         return itemstack;
     }
 
+    // CraftBukkit start
+    @Override
+    public void sendSystemMessage(Text arg, UUID uUID) {
+    }
+
+
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(ServerCommandSource wrapper) {
+        return wrapper.getEntity() != null ? wrapper.getEntity().getBukkitSender(wrapper) : new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, this);
+    }
+
+    @Override
+    public boolean shouldReceiveFeedback() {
+        return false;
+    }
+
+    @Override
+    public boolean shouldTrackOutput() {
+        return false;
+    }
+
+    @Override
+    public boolean shouldBroadcastConsoleToOps() {
+        return false;
+    }
+
+    // CraftBukkit end
+
     private ServerCommandSource getCommandSource(@Nullable PlayerEntity playerentity) {
         String s;
         Object object;
