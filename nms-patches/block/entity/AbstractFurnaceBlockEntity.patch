--- a/net/minecraft/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/block/entity/AbstractFurnaceBlockEntity.java
@@ -39,7 +39,19 @@
 import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.world.ServerWorldAccess;
 import net.minecraft.world.World;
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+// CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends LockableContainerBlockEntity implements SidedInventory, RecipeUnlocker, RecipeInputProvider, Tickable {
 
@@ -248,12 +260,24 @@
                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
                 }
             } else {
-                Recipe<?> recipe = (Recipe) this.world.getRecipeManager().getFirstMatch(this.recipeType, this, this.world).orElse((Object) null);
+                // Recipe<?> recipe = (Recipe) this.world.getRecipeManager().getFirstMatch(this.recipeType, this, this.world).orElse((Object) null);
+                Recipe<?> recipe = this.world.getRecipeManager().getFirstMatch(this.recipeType, this, this.world).orElse(null); // CraftBukkit decompile error
 
                 if (!this.isBurning() && this.canAcceptRecipeOutput(recipe)) {
-                    this.burnTime = this.getFuelTime(itemstack);
+                    // CraftBukkit start
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at((ServerWorldAccess) this.world, this.pos), fuel, getFuelTime(itemstack));
+                    this.world.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                    if (furnaceBurnEvent.isCancelled()) {
+                        return;
+                    }
+
+                    this.burnTime = furnaceBurnEvent.getBurnTime();
                     this.fuelTime = this.burnTime;
-                    if (this.isBurning()) {
+                    if (this.isBurning() && furnaceBurnEvent.isBurning()) {
+                        // CraftBukkit end
                         flag1 = true;
                         if (!itemstack.isEmpty()) {
                             Item item = itemstack.getItem();
@@ -315,11 +339,38 @@
             ItemStack itemstack1 = recipe.getOutput();
             ItemStack itemstack2 = (ItemStack) this.inventory.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.world.getCraftWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), source, result);
+            Bukkit.getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    this.inventory.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.increment(itemstack1.getCount());
+                } else {
+                    return;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 this.inventory.set(2, itemstack1.copy());
             } else if (itemstack2.getItem() == itemstack1.getItem()) {
                 itemstack2.increment(1);
             }
+            */
+            // CraftBukkit end
 
             if (!this.world.isClient) {
                 this.setLastRecipe(recipe);
@@ -344,7 +395,7 @@
     }
 
     protected int getCookTime() {
-        return (Integer) this.world.getRecipeManager().getFirstMatch(this.recipeType, this, this.world).map(AbstractCookingRecipe::getCookTime).orElse(200);
+        return this.hasWorld() ? (Integer) this.world.getRecipeManager().getFirstMatch(this.recipeType, this, this.world).map(AbstractCookingRecipe::getCookTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
     }
 
     public static boolean canUseAsFuel(ItemStack itemstack) {
@@ -456,14 +507,20 @@
 
     public void unlockLastRecipe(PlayerEntity playerentity) {}
 
-    public void dropExperience(PlayerEntity playerentity) {
-        List<Recipe<?>> list = this.method_27354(playerentity.world, playerentity.getPos());
+    public void dropExperience(PlayerEntity playerentity, ItemStack stack, int amount) { // CraftBukkit
+        List<Recipe<?>> list = this.method_27354(playerentity.world, playerentity.getPos(), playerentity, stack, amount); // CraftBukkit
 
         playerentity.unlockRecipes((Collection) list);
         this.recipesUsed.clear();
     }
 
     public List<Recipe<?>> method_27354(World world, Vec3d vec3d) {
+        // CraftBukkit start
+        return this.method_27354(world, vec3d, null, null, 0);
+    }
+
+    public List<Recipe<?>> method_27354(World world, Vec3d vec3d, PlayerEntity playerEntity, ItemStack itemStack, int amount) {
+        // CraftBukkit end
         List<Recipe<?>> list = Lists.newArrayList();
         ObjectIterator objectiterator = this.recipesUsed.object2IntEntrySet().iterator();
 
@@ -472,14 +529,14 @@
 
             world.getRecipeManager().get((Identifier) object2intmap_entry.getKey()).ifPresent((recipe) -> {
                 list.add(recipe);
-                dropExperience(world, vec3d, object2intmap_entry.getIntValue(), ((AbstractCookingRecipe) recipe).getExperience());
+                dropExperience(world, vec3d, object2intmap_entry.getIntValue(), ((AbstractCookingRecipe) recipe).getExperience(), playerEntity, itemStack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void dropExperience(World world, Vec3d vec3d, int i, float f) {
+    private void dropExperience(World world, Vec3d vec3d, int i, float f, PlayerEntity playerEntity, ItemStack itemstack, int amount) { // CraftBukkit
         int j = MathHelper.floor((float) i * f);
         float f1 = MathHelper.fractionalPart((float) i * f);
 
@@ -487,6 +544,14 @@
             ++j;
         }
 
+        // CraftBukkit start - fire FurnaceExtractEvent
+        if (amount != 0) {
+            FurnaceExtractEvent event = new FurnaceExtractEvent((Player) playerEntity.getBukkitEntity(), CraftBlock.at(world, pos), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+            Bukkit.getPluginManager().callEvent(event);
+            j = event.getExpToDrop();
+        }
+        // CraftBukkit end
+
         while (j > 0) {
             int k = ExperienceOrbEntity.roundToOrbSize(j);
 
@@ -506,4 +571,34 @@
         }
 
     }
+
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.inventory;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
 }
