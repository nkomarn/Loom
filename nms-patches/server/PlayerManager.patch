--- a/net/minecraft/server/PlayerManager.java
+++ b/net/minecraft/server/PlayerManager.java
@@ -30,26 +30,7 @@
 import net.minecraft.network.MessageType;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketByteBuf;
-import net.minecraft.network.packet.s2c.play.ChunkLoadDistanceS2CPacket;
-import net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket;
-import net.minecraft.network.packet.s2c.play.DifficultyS2CPacket;
-import net.minecraft.network.packet.s2c.play.EntityStatusEffectS2CPacket;
-import net.minecraft.network.packet.s2c.play.EntityStatusS2CPacket;
-import net.minecraft.network.packet.s2c.play.ExperienceBarUpdateS2CPacket;
-import net.minecraft.network.packet.s2c.play.GameJoinS2CPacket;
-import net.minecraft.network.packet.s2c.play.GameMessageS2CPacket;
-import net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket;
-import net.minecraft.network.packet.s2c.play.HeldItemChangeS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlayerAbilitiesS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlayerListS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlayerSpawnPositionS2CPacket;
-import net.minecraft.network.packet.s2c.play.SynchronizeRecipesS2CPacket;
-import net.minecraft.network.packet.s2c.play.SynchronizeTagsS2CPacket;
-import net.minecraft.network.packet.s2c.play.TeamS2CPacket;
-import net.minecraft.network.packet.s2c.play.WorldBorderS2CPacket;
-import net.minecraft.network.packet.s2c.play.WorldTimeUpdateS2CPacket;
+import net.minecraft.network.packet.s2c.play.*;
 import net.minecraft.scoreboard.AbstractTeam;
 import net.minecraft.scoreboard.ScoreboardObjective;
 import net.minecraft.scoreboard.ServerScoreboard;
@@ -86,6 +67,30 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.util.Vector;
+
+import net.minecraft.server.dedicated.MinecraftDedicatedServer;
+import net.minecraft.server.network.ServerLoginNetworkHandler;
+// CraftBukkit end
+
 public abstract class PlayerManager {
 
     public static final File BANNED_PLAYERS_FILE = new File("banned-players.json");
@@ -95,15 +100,17 @@
     private static final Logger LOGGER = LogManager.getLogger();
     private static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
-    private final List<ServerPlayerEntity> players = Lists.newArrayList();
+    private final List<ServerPlayerEntity> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
     private final Map<UUID, ServerPlayerEntity> playerMap = Maps.newHashMap();
     private final BannedPlayerList bannedProfiles;
     private final BannedIpList bannedIps;
     private final OperatorList ops;
     private final Whitelist whitelist;
-    private final Map<UUID, ServerStatHandler> statisticsMap;
-    private final Map<UUID, PlayerAdvancementTracker> advancementTrackers;
-    private final WorldSaveHandler saveHandler;
+    // CraftBukkit start
+    // private final Map<UUID, ServerStatHandler> statisticsMap;
+    // private final Map<UUID, PlayerAdvancementTracker> advancementTrackers;
+    // CraftBukkit end
+    public final WorldSaveHandler saveHandler; // Loom - public access
     private boolean whitelistEnabled;
     private final RegistryTracker.Modifiable registryTracker;
     protected final int maxPlayers;
@@ -112,13 +119,23 @@
     private boolean cheatsAllowed;
     private int latencyUpdateTimer;
 
+    // CraftBukkit start
+    private CraftServer cserver;
+
     public PlayerManager(MinecraftServer minecraftserver, RegistryTracker.Modifiable registrytracker_modifiable, WorldSaveHandler worldsavehandler, int i) {
+        this.cserver = minecraftserver.server = new CraftServer((MinecraftDedicatedServer) minecraftserver, this);
+        minecraftserver.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
+        minecraftserver.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(minecraftserver.server));
+        // CraftBukkit end
+
         this.bannedProfiles = new BannedPlayerList(PlayerManager.BANNED_PLAYERS_FILE);
         this.bannedIps = new BannedIpList(PlayerManager.BANNED_IPS_FILE);
         this.ops = new OperatorList(PlayerManager.OPERATORS_FILE);
         this.whitelist = new Whitelist(PlayerManager.WHITELIST_FILE);
-        this.statisticsMap = Maps.newHashMap();
-        this.advancementTrackers = Maps.newHashMap();
+        // CraftBukkit start
+        // this.statisticsMap = Maps.newHashMap();
+        // this.advancementTrackers = Maps.newHashMap();
+        // CraftBukkit end
         this.server = minecraftserver;
         this.registryTracker = registrytracker_modifiable;
         this.maxPlayers = i;
@@ -135,6 +152,13 @@
         CompoundTag compoundtag = this.loadPlayerData(serverplayerentity);
         RegistryKey registrykey;
 
+        // CraftBukkit start - Better rename detection
+        if (compoundtag != null && compoundtag.contains("bukkit")) {
+            CompoundTag bukkit = compoundtag.getCompound("bukkit");
+            s = bukkit.contains("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
+        }
+        // CraftBukkit end
+
         if (compoundtag != null) {
             DataResult dataresult = DimensionType.method_28521(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("Dimension")));
             Logger logger = PlayerManager.LOGGER;
@@ -164,7 +188,8 @@
             s1 = clientconnection.getAddress().toString();
         }
 
-        PlayerManager.LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", (Object) serverplayerentity.getName().getString(), s1, serverplayerentity.getEntityId(), serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ());
+        // CraftBukkit - Moved message to after join
+        // PlayerManager.LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", (Object) serverplayerentity.getName().getString(), s1, serverplayerentity.getEntityId(), serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ());
         WorldProperties worldproperties = serverworld1.getLevelProperties();
 
         this.setGameMode(serverplayerentity, (ServerPlayerEntity) null, serverworld1);
@@ -192,19 +217,63 @@
         } else {
             translatabletext = new TranslatableText("multiplayer.player.joined.renamed", new Object[]{serverplayerentity.getDisplayName(), s});
         }
+        // CraftBukkit start
+        translatabletext.formatted(Formatting.YELLOW);
+        String joinMessage = CraftChatMessage.fromComponent(translatabletext);
 
-        this.broadcastChatMessage(translatabletext.formatted(Formatting.YELLOW), MessageType.SYSTEM, Util.NIL_UUID);
+        // --- this.broadcastChatMessage(translatabletext.formatted(Formatting.YELLOW), MessageType.SYSTEM, Util.NIL_UUID);
         serverplaynetworkhandler.requestTeleport(serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ(), serverplayerentity.yaw, serverplayerentity.pitch);
         this.players.add(serverplayerentity);
         this.playerMap.put(serverplayerentity.getUuid(), serverplayerentity);
-        this.sendToAll(new PlayerListS2CPacket(PlayerListS2CPacket.Action.ADD_PLAYER, new ServerPlayerEntity[]{serverplayerentity}));
+        // this.sendToAll(new PlayerListS2CPacket(PlayerListS2CPacket.Action.ADD_PLAYER, new ServerPlayerEntity[]{serverplayerentity}));
+
+        // CraftBukkit start
+        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(cserver.getPlayer(serverplayerentity), joinMessage);
+        cserver.getPluginManager().callEvent(playerJoinEvent);
+
+        if (!serverplayerentity.networkHandler.connection.isOpen()) {
+            return;
+        }
+
+        joinMessage = playerJoinEvent.getJoinMessage();
+
+        if (joinMessage != null && joinMessage.length() > 0) {
+            for (Text line : org.bukkit.craftbukkit.util.CraftChatMessage.fromString(joinMessage)) {
+                server.getPlayerManager().sendToAll(new GameMessageS2CPacket(line, MessageType.SYSTEM, Util.NIL_UUID));
+            }
+        }
+        // CraftBukkit end
+
+        // CraftBukkit start - sendAll above replaced with this loop
+        PlayerListS2CPacket packet = new PlayerListS2CPacket(PlayerListS2CPacket.Action.ADD_PLAYER, serverplayerentity);
 
         for (int i = 0; i < this.players.size(); ++i) {
+            ServerPlayerEntity serverplayerentity1 = this.players.get(i);
+
+            if (serverplayerentity1.getBukkitEntity().canSee(serverplayerentity.getBukkitEntity())) {
+                serverplayerentity1.networkHandler.sendPacket(packet);
+            }
+
+            if (!serverplayerentity.getBukkitEntity().canSee(serverplayerentity1.getBukkitEntity())) {
+                continue;
+            }
+
             serverplayerentity.networkHandler.sendPacket(new PlayerListS2CPacket(PlayerListS2CPacket.Action.ADD_PLAYER, new ServerPlayerEntity[]{(ServerPlayerEntity) this.players.get(i)}));
         }
+        serverplayerentity.sentListPacket = true;
+        // CraftBukkit end
+
+        serverplayerentity.networkHandler.sendPacket(new EntityTrackerUpdateS2CPacket(serverplayerentity.getEntityId(), serverplayerentity.getDataTracker(), true)); // CraftBukkit - BungeeCord#2321, send complete data to self on spawn
+
+        // CraftBukkit start - Only add if the player wasn't moved in the event
+        if (serverplayerentity.world == serverworld1 && !serverworld1.getPlayers().contains(serverplayerentity)) {
+            serverworld1.onPlayerConnected(serverplayerentity);
+            this.server.getBossBarManager().onPlayerConnect(serverplayerentity);
+        }
+
+        serverworld1 = serverplayerentity.getServerWorld();  // CraftBukkit - Update in case join event changed it
+        // CraftBukkit end
 
-        serverworld1.onPlayerConnected(serverplayerentity);
-        this.server.getBossBarManager().onPlayerConnect(serverplayerentity);
         this.sendWorldInfo(serverplayerentity, serverworld1);
         if (!this.server.getResourcePackUrl().isEmpty()) {
             serverplayerentity.sendResourcePackUrl(this.server.getResourcePackUrl(), this.server.getResourcePackHash());
@@ -220,8 +289,11 @@
 
         if (compoundtag != null && compoundtag.contains("RootVehicle", 10)) {
             CompoundTag compoundtag1 = compoundtag.getCompound("RootVehicle");
-            Entity entity = EntityType.loadEntityWithPassengers(compoundtag1.getCompound("Entity"), serverworld1, (entity1) -> {
-                return !serverworld1.tryLoadEntity(entity1) ? null : entity1;
+            // CraftBukkit start
+            ServerWorld finalWorldServer = serverworld1;
+            Entity entity = EntityType.loadEntityWithPassengers(compoundtag1.getCompound("Entity"), finalWorldServer, (entity1) -> {
+                return !finalWorldServer.tryLoadEntity(entity1) ? null : entity1;
+                // CraftBukkit end
             });
 
             if (entity != null) {
@@ -264,9 +336,11 @@
         }
 
         serverplayerentity.onSpawn();
+        // CraftBukkit - Moved from above, added world
+        PlayerManager.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", serverplayerentity.getDisplayName().getString(), s1, serverplayerentity.getEntityId(), serverworld1.field_24456.getLevelName(), serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ());
     }
 
-    protected void sendScoreboard(ServerScoreboard serverscoreboard, ServerPlayerEntity serverplayerentity) {
+    public void sendScoreboard(ServerScoreboard serverscoreboard, ServerPlayerEntity serverplayerentity) { // Loom - public access
         Set<ScoreboardObjective> set = Sets.newHashSet();
         Iterator iterator = serverscoreboard.getTeams().iterator();
 
@@ -296,25 +370,27 @@
     }
 
     public void setMainWorld(ServerWorld serverworld) {
+        if (saveHandler != null) return; // CraftBukkit
+
         serverworld.getWorldBorder().addListener(new WorldBorderListener() {
             public void onSizeChange(WorldBorder worldborder, double d0) {
-                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_SIZE));
+                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_SIZE), worldborder.world); // CraftBukkit
             }
 
             public void onInterpolateSize(WorldBorder worldborder, double d0, double d1, long i) {
-                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.LERP_SIZE));
+                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.LERP_SIZE), worldborder.world); // CraftBukkit
             }
 
             public void onCenterChanged(WorldBorder worldborder, double d0, double d1) {
-                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_CENTER));
+                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_CENTER), worldborder.world); // CraftBukkit
             }
 
             public void onWarningTimeChanged(WorldBorder worldborder, int i) {
-                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_TIME));
+                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_TIME), worldborder.world); // CraftBukkit
             }
 
             public void onWarningBlocksChanged(WorldBorder worldborder, int i) {
-                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_BLOCKS));
+                PlayerManager.this.sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_BLOCKS), worldborder.world); // CraftBukkit
             }
 
             public void onDamagePerBlockChanged(WorldBorder worldborder, double d0) {}
@@ -340,14 +416,16 @@
     }
 
     protected void savePlayerData(ServerPlayerEntity serverplayerentity) {
+        if (!serverplayerentity.getBukkitEntity().isPersistent()) return; // CraftBukkit
+
         this.saveHandler.savePlayerData(serverplayerentity);
-        ServerStatHandler serverstathandler = (ServerStatHandler) this.statisticsMap.get(serverplayerentity.getUuid());
+        ServerStatHandler serverstathandler = (ServerStatHandler) serverplayerentity.getStatHandler(); // CraftBukkit
 
         if (serverstathandler != null) {
             serverstathandler.save();
         }
 
-        PlayerAdvancementTracker playeradvancementtracker = (PlayerAdvancementTracker) this.advancementTrackers.get(serverplayerentity.getUuid());
+        PlayerAdvancementTracker playeradvancementtracker = (PlayerAdvancementTracker) serverplayerentity.getAdvancementTracker(); // CraftBukkit
 
         if (playeradvancementtracker != null) {
             playeradvancementtracker.save();
@@ -355,10 +433,21 @@
 
     }
 
-    public void remove(ServerPlayerEntity serverplayerentity) {
+    public String remove(ServerPlayerEntity serverplayerentity) { // CraftBukkit - return string
         ServerWorld serverworld = serverplayerentity.getServerWorld();
 
         serverplayerentity.incrementStat(Stats.LEAVE_GAME);
+
+        // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
+        serverplayerentity.closeHandledScreen();
+
+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(serverplayerentity), "\u00A7e" + serverplayerentity.getName() + " left the game");
+        cserver.getPluginManager().callEvent(playerQuitEvent);
+        serverplayerentity.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+
+        serverplayerentity.playerTick(); // SPIGOT-924
+        // CraftBukkit end
+
         this.savePlayerData(serverplayerentity);
         if (serverplayerentity.hasVehicle()) {
             Entity entity = serverplayerentity.getRootVehicle();
@@ -390,18 +479,66 @@
 
         if (serverplayerentity1 == serverplayerentity) {
             this.playerMap.remove(uuid);
-            this.statisticsMap.remove(uuid);
-            this.advancementTrackers.remove(uuid);
+            // CraftBukkit start
+            // this.statisticsMap.remove(uuid);
+            // this.advancementTrackers.remove(uuid);
+            // CraftBukkit end
+        }
+
+        // CraftBukkit start
+        // this.sendToAll(new PlayerListS2CPacket(PlayerListS2CPacket.Action.REMOVE_PLAYER, new ServerPlayerEntity[]{serverplayerentity}));
+        PlayerListS2CPacket packet = new PlayerListS2CPacket(PlayerListS2CPacket.Action.REMOVE_PLAYER, serverplayerentity);
+        for (int i = 0; i < players.size(); i++) {
+            ServerPlayerEntity entityplayer2 = (ServerPlayerEntity) this.players.get(i);
+
+            if (entityplayer2.getBukkitEntity().canSee(serverplayerentity.getBukkitEntity())) {
+                entityplayer2.networkHandler.sendPacket(packet);
+            } else {
+                entityplayer2.getBukkitEntity().removeDisconnectingPlayer(serverplayerentity.getBukkitEntity());
+            }
         }
+        // This removes the scoreboard (and player reference) for the specific player in the manager
+        cserver.getScoreboardManager().removePlayer(serverplayerentity.getBukkitEntity());
+        // CraftBukkit end
 
-        this.sendToAll(new PlayerListS2CPacket(PlayerListS2CPacket.Action.REMOVE_PLAYER, new ServerPlayerEntity[]{serverplayerentity}));
+        return playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
 
-    @Nullable
-    public Text checkCanJoin(SocketAddress socketaddress, GameProfile gameprofile) {
+    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
+    public ServerPlayerEntity checkCanJoin(ServerLoginNetworkHandler loginlistener, GameProfile gameprofile, String hostname) {
         TranslatableText translatabletext;
 
-        if (this.bannedProfiles.contains(gameprofile)) {
+        // Moved from processLogin
+        UUID uuid = PlayerEntity.getUuidFromProfile(gameprofile);
+        List<ServerPlayerEntity> list = Lists.newArrayList();
+
+        ServerPlayerEntity entityplayer;
+
+        for (int i = 0; i < this.players.size(); ++i) {
+            entityplayer = (ServerPlayerEntity) this.players.get(i);
+            if (entityplayer.getUuid().equals(uuid)) {
+                list.add(entityplayer);
+            }
+        }
+
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            entityplayer = (ServerPlayerEntity) iterator.next();
+            this.savePlayerData(entityplayer); // CraftBukkit - Force the player's inventory to be saved
+            entityplayer.networkHandler.disconnect(new TranslatableText("multiplayer.disconnect.duplicate_login", new Object[0]));
+        }
+
+        // Instead of kicking then returning, we need to store the kick reason
+        // in the event, check with plugins to see if it's ok, and THEN kick
+        // depending on the outcome.
+        SocketAddress socketaddress = loginlistener.connection.getAddress();
+
+        ServerPlayerEntity entity = new ServerPlayerEntity(this.server, this.server.getWorld(World.OVERWORLD), gameprofile, new ServerPlayerInteractionManager(this.server.getWorld(World.OVERWORLD)));
+        Player player = entity.getBukkitEntity();
+        PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress());
+
+        if (getUserBanList().contains(gameprofile) && !getUserBanList().get(gameprofile).isInvalid()) {
             BannedPlayerEntry bannedplayerentry = (BannedPlayerEntry) this.bannedProfiles.get(gameprofile);
 
             translatabletext = new TranslatableText("multiplayer.disconnect.banned.reason", new Object[]{bannedplayerentry.getReason()});
@@ -409,10 +546,12 @@
                 translatabletext.append((Text) (new TranslatableText("multiplayer.disconnect.banned.expiration", new Object[]{PlayerManager.DATE_FORMATTER.format(bannedplayerentry.getExpiryDate())})));
             }
 
-            return translatabletext;
+            // return translatabletext;
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, CraftChatMessage.fromComponent(translatabletext));
         } else if (!this.isWhitelisted(gameprofile)) {
-            return new TranslatableText("multiplayer.disconnect.not_whitelisted");
-        } else if (this.bannedIps.isBanned(socketaddress)) {
+            translatabletext = new TranslatableText("multiplayer.disconnect.not_whitelisted");
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, CraftChatMessage.fromComponent(translatabletext));
+        } else if (this.getIpBanList().isBanned(socketaddress) && !getIpBanList().get(socketaddress).isInvalid()) {
             BannedIpEntry bannedipentry = this.bannedIps.get(socketaddress);
 
             translatabletext = new TranslatableText("multiplayer.disconnect.banned_ip.reason", new Object[]{bannedipentry.getReason()});
@@ -420,13 +559,25 @@
                 translatabletext.append((Text) (new TranslatableText("multiplayer.disconnect.banned_ip.expiration", new Object[]{PlayerManager.DATE_FORMATTER.format(bannedipentry.getExpiryDate())})));
             }
 
-            return translatabletext;
+            // return translatabletext;
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, CraftChatMessage.fromComponent(translatabletext));
         } else {
-            return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile) ? new TranslatableText("multiplayer.disconnect.server_full") : null;
+            // return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile) ? new TranslatableText("multiplayer.disconnect.server_full") : null;
+            if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile)) {
+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, "The server is full");
+            }
+        }
+
+        cserver.getPluginManager().callEvent(event);
+        if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
+            loginlistener.disconnect(event.getKickMessage());
+            return null;
         }
+        return entity;
     }
 
-    public ServerPlayerEntity createPlayer(GameProfile gameprofile) {
+    public ServerPlayerEntity createPlayer(GameProfile gameprofile, ServerPlayerEntity player) { // CraftBukkit - added EntityPlayer
+        /* CraftBukkit startMoved up
         UUID uuid = PlayerEntity.getUuidFromProfile(gameprofile);
         List<ServerPlayerEntity> list = Lists.newArrayList();
 
@@ -462,13 +613,22 @@
         }
 
         return new ServerPlayerEntity(this.server, serverworld, gameprofile, (ServerPlayerInteractionManager) object);
+        */
+        return player;
+        // CraftBukkit end
     }
 
     public ServerPlayerEntity respawnPlayer(ServerPlayerEntity serverplayerentity, boolean flag) {
+        return this.respawnPlayer(serverplayerentity, this.server.getWorld(serverplayerentity.getSpawnPointDimension()), flag, null, true);
+    }
+
+    public ServerPlayerEntity respawnPlayer(ServerPlayerEntity serverplayerentity, ServerWorld worldserver, boolean flag, Location location, boolean avoidSuffocation) {
+        serverplayerentity.stopRiding(); // CraftBukkit
         this.players.remove(serverplayerentity);
         serverplayerentity.getServerWorld().removePlayer(serverplayerentity);
         BlockPos blockpos = serverplayerentity.getSpawnPointPosition();
         boolean flag1 = serverplayerentity.isSpawnPointSet();
+        /* CraftBukkit start
         ServerWorld serverworld = this.server.getWorld(serverplayerentity.getSpawnPointDimension());
         Optional optional;
 
@@ -488,6 +648,11 @@
         }
 
         ServerPlayerEntity serverplayerentity1 = new ServerPlayerEntity(this.server, serverworld1, serverplayerentity.getGameProfile(), (ServerPlayerInteractionManager) object);
+        // */
+        ServerPlayerEntity serverplayerentity1 = serverplayerentity;
+        org.bukkit.World fromWorld = serverplayerentity.getBukkitEntity().getWorld();
+        serverplayerentity.notInAnyWorld = false;
+        // CraftBukkit end
 
         serverplayerentity1.networkHandler = serverplayerentity.networkHandler;
         serverplayerentity1.copyFrom(serverplayerentity, flag);
@@ -501,44 +666,114 @@
             serverplayerentity1.addScoreboardTag(s);
         }
 
-        this.setGameMode(serverplayerentity1, serverplayerentity, serverworld1);
+        // this.setGameMode(serverplayerentity1, serverplayerentity, serverworld1); // CraftBukkit - removed
         boolean flag2 = false;
 
-        if (optional.isPresent()) {
-            Vec3d vec3d = (Vec3d) optional.get();
+        // CraftBukkit start - fire PlayerRespawnEvent
+        if (location == null) {
+            boolean isBedSpawn = false;
+            ServerWorld worldserver1 = this.server.getWorld(serverplayerentity.getSpawnPointDimension());
+            if (worldserver1 != null) {
+                Optional<Vec3d> optional;
+
+                if (blockpos != null) {
+                    optional = PlayerEntity.findRespawnPosition(worldserver1, blockpos, flag1, flag);
+                } else {
+                    optional = Optional.empty();
+                }
+
+                if (optional.isPresent()) {
+                    Vec3d vec3d = optional.get();
+                    isBedSpawn = true;
+                    location = new Location(worldserver1.getCraftWorld(), vec3d.getX(), vec3d.getY(), vec3d.getZ());
+
+                    serverplayerentity1.setSpawnPoint(worldserver1.getRegistryKey(), blockpos, flag1, false);
+                    flag2 = !flag && worldserver1.getBlockState(blockpos).getBlock() instanceof RespawnAnchorBlock;
+                } else if (blockpos != null) {
+                    serverplayerentity1.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.NO_RESPAWN_BLOCK, 0.0F));
+                }
+            }
+
+            if (location == null) {
+                worldserver1 = this.server.getWorld(World.OVERWORLD);
+                blockpos = serverplayerentity1.getSpawnPoint(worldserver1);
+                location = new Location(worldserver1.getCraftWorld(), (double) ((float) blockpos.getX() + 0.5F), (double) ((float) blockpos.getY() + 0.1F), (double) ((float) blockpos.getZ() + 0.5F));
+            }
 
-            serverplayerentity1.refreshPositionAndAngles(vec3d.x, vec3d.y, vec3d.z, 0.0F, 0.0F);
-            serverplayerentity1.setSpawnPoint(serverworld1.getRegistryKey(), blockpos, flag1, false);
-            flag2 = !flag && serverworld1.getBlockState(blockpos).getBlock() instanceof RespawnAnchorBlock;
-        } else if (blockpos != null) {
-            serverplayerentity1.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.NO_RESPAWN_BLOCK, 0.0F));
+            Player respawnPlayer = cserver.getPlayer(serverplayerentity1);
+            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
+            cserver.getPluginManager().callEvent(respawnEvent);
+
+            location = respawnEvent.getRespawnLocation();
+            if (!flag) serverplayerentity.reset(); // SPIGOT-4785
+        } else {
+            location.setWorld(worldserver.getCraftWorld());
         }
+        ServerWorld serverworld1 = ((CraftWorld) location.getWorld()).getHandle();
+        serverplayerentity.updatePositionAndAngles(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
 
-        while (!serverworld1.doesNotCollide((Entity) serverplayerentity1) && serverplayerentity1.getY() < 256.0D) {
+        while (avoidSuffocation && !serverworld1.doesNotCollide(serverplayerentity1) && serverplayerentity1.getY() < 256.0D) {
             serverplayerentity1.updatePosition(serverplayerentity1.getX(), serverplayerentity1.getY() + 1.0D, serverplayerentity1.getZ());
         }
 
-        WorldProperties worldproperties = serverplayerentity1.world.getLevelProperties();
-
+        // CraftBukkit start
+        WorldProperties worldproperties = serverworld1.getLevelProperties();
         serverplayerentity1.networkHandler.sendPacket(new PlayerRespawnS2CPacket(serverplayerentity1.world.getDimensionRegistryKey(), serverplayerentity1.world.getRegistryKey(), BiomeAccess.hashSeed(serverplayerentity1.getServerWorld().getSeed()), serverplayerentity1.interactionManager.getGameMode(), serverplayerentity1.interactionManager.method_30119(), serverplayerentity1.getServerWorld().isDebugWorld(), serverplayerentity1.getServerWorld().isFlat(), flag));
-        serverplayerentity1.networkHandler.requestTeleport(serverplayerentity1.getX(), serverplayerentity1.getY(), serverplayerentity1.getZ(), serverplayerentity1.yaw, serverplayerentity1.pitch);
+        serverplayerentity1.setWorld(serverworld1);
+        serverplayerentity1.removed = false;
+        serverplayerentity1.networkHandler.teleport(new Location(serverworld1.getCraftWorld(), serverplayerentity1.getX(), serverplayerentity1.getY(), serverplayerentity1.getZ(), serverplayerentity1.yaw, serverplayerentity1.pitch));
+        serverplayerentity1.setSneaking(false);
+
+        //serverplayerentity1.networkHandler.requestTeleport(serverplayerentity1.getX(), serverplayerentity1.getY(), serverplayerentity1.getZ(), serverplayerentity1.yaw, serverplayerentity1.pitch);
         serverplayerentity1.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(serverworld1.getSpawnPos()));
         serverplayerentity1.networkHandler.sendPacket(new DifficultyS2CPacket(worldproperties.getDifficulty(), worldproperties.isDifficultyLocked()));
         serverplayerentity1.networkHandler.sendPacket(new ExperienceBarUpdateS2CPacket(serverplayerentity1.experienceProgress, serverplayerentity1.totalExperience, serverplayerentity1.experienceLevel));
         this.sendWorldInfo(serverplayerentity1, serverworld1);
         this.sendCommandTree(serverplayerentity1);
-        serverworld1.onPlayerRespawned(serverplayerentity1);
-        this.players.add(serverplayerentity1);
-        this.playerMap.put(serverplayerentity1.getUuid(), serverplayerentity1);
-        serverplayerentity1.onSpawn();
+        if (!serverplayerentity.networkHandler.isDisconnected()) {
+            serverworld1.onPlayerRespawned(serverplayerentity1);
+            this.players.add(serverplayerentity1);
+            this.playerMap.put(serverplayerentity1.getUuid(), serverplayerentity1);
+        }
+
+        // serverplayerentity1.onSpawn();
         serverplayerentity1.setHealth(serverplayerentity1.getHealth());
         if (flag2) {
             serverplayerentity1.networkHandler.sendPacket(new PlaySoundS2CPacket(SoundEvents.BLOCK_RESPAWN_ANCHOR_DEPLETE, SoundCategory.BLOCKS, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), 1.0F, 1.0F));
         }
 
+        // Added from changeDimension
+        sendPlayerStatus(serverplayerentity); // Update health, etc...
+        serverplayerentity.sendAbilitiesUpdate();
+        for (Object o1 : serverplayerentity.getStatusEffects()) {
+            StatusEffectInstance mobEffect = (StatusEffectInstance) o1;
+            serverplayerentity.networkHandler.sendPacket(new EntityStatusEffectS2CPacket(serverplayerentity.getEntityId(), mobEffect));
+        }
+
+        // Fire advancement trigger
+        serverplayerentity.dimensionChanged(((CraftWorld) fromWorld).getHandle());
+
+        // Don't fire on respawn
+        if (fromWorld != location.getWorld()) {
+            PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(serverplayerentity.getBukkitEntity(), fromWorld);
+            cserver.getPluginManager().callEvent(event);
+        }
+        // Save player file again if they were disconnected
+        if (serverplayerentity.networkHandler.isDisconnected()) {
+            this.savePlayerData(serverplayerentity);
+        }
+        // CraftBukkit end
+
         return serverplayerentity1;
     }
 
+    /**
+     *
+     * --------------------------------------------------------
+     * --------------------------------------------------------
+     *
+     */
+
     public void sendCommandTree(ServerPlayerEntity serverplayerentity) {
         GameProfile gameprofile = serverplayerentity.getGameProfile();
         int i = this.server.getPermissionLevel(gameprofile);
@@ -548,7 +783,15 @@
 
     public void updatePlayerLatency() {
         if (++this.latencyUpdateTimer > 600) {
-            this.sendToAll(new PlayerListS2CPacket(PlayerListS2CPacket.Action.UPDATE_LATENCY, this.players));
+            // CraftBukkit start
+            for (int i = 0; i < this.players.size(); ++i) {
+                final ServerPlayerEntity target = (ServerPlayerEntity) this.players.get(i);
+
+                target.networkHandler.sendPacket(new PlayerListS2CPacket(PlayerListS2CPacket.Action.UPDATE_LATENCY, Iterables.filter(this.players, input -> {
+                    return target.getBukkitEntity().canSee(input.getBukkitEntity());
+                })));
+            }
+            // CraftBukkit end
             this.latencyUpdateTimer = 0;
         }
 
@@ -561,6 +804,25 @@
 
     }
 
+    // CraftBukkit start - add a world/entity limited version
+    public void sendToAll(Packet packet, PlayerEntity entityhuman) {
+        for (int i = 0; i < this.players.size(); ++i) {
+            ServerPlayerEntity entityplayer =  this.players.get(i);
+            if (entityhuman != null && entityhuman instanceof ServerPlayerEntity && !entityplayer.getBukkitEntity().canSee(((ServerPlayerEntity) entityhuman).getBukkitEntity())) {
+                continue;
+            }
+            ((ServerPlayerEntity) this.players.get(i)).networkHandler.sendPacket(packet);
+        }
+    }
+
+    public void sendToAll(Packet packet, World world) {
+        for (int i = 0; i < world.getPlayers().size(); ++i) {
+            ((ServerPlayerEntity) world.getPlayers().get(i)).networkHandler.sendPacket(packet);
+        }
+
+    }
+    // CraftBukkit end
+
     public void sendToDimension(Packet<?> packet, RegistryKey<World> registrykey) {
         for (int i = 0; i < this.players.size(); ++i) {
             ServerPlayerEntity serverplayerentity = (ServerPlayerEntity) this.players.get(i);
@@ -637,7 +899,7 @@
     }
 
     public void removeFromOperators(GameProfile gameprofile) {
-        this.ops.remove((Object) gameprofile);
+        this.ops.remove(gameprofile); // Loom - decompile errors
         ServerPlayerEntity serverplayerentity = this.getPlayer(gameprofile.getId());
 
         if (serverplayerentity != null) {
@@ -660,7 +922,7 @@
 
             serverplayerentity.networkHandler.sendPacket(new EntityStatusS2CPacket(serverplayerentity, b0));
         }
-
+        serverplayerentity.getBukkitEntity().recalculatePermissions(); // CraftBukkit
         this.server.getCommandManager().sendCommandTree(serverplayerentity);
     }
 
@@ -693,6 +955,12 @@
         for (int i = 0; i < this.players.size(); ++i) {
             ServerPlayerEntity serverplayerentity = (ServerPlayerEntity) this.players.get(i);
 
+            // CraftBukkit start - Test if player receiving packet can see the source of the packet
+            if (playerentity != null && playerentity instanceof ServerPlayerEntity && !serverplayerentity.getBukkitEntity().canSee(((ServerPlayerEntity) playerentity).getBukkitEntity())) {
+               continue;
+            }
+            // CraftBukkit end
+
             if (serverplayerentity != playerentity && serverplayerentity.world.getRegistryKey() == registrykey) {
                 double d4 = d0 - serverplayerentity.getX();
                 double d5 = d1 - serverplayerentity.getY();
@@ -732,23 +1000,36 @@
     public void reloadWhitelist() {}
 
     public void sendWorldInfo(ServerPlayerEntity serverplayerentity, ServerWorld serverworld) {
-        WorldBorder worldborder = this.server.getOverworld().getWorldBorder();
+        WorldBorder worldborder = serverplayerentity.world.getWorldBorder(); // CraftBukkit
 
         serverplayerentity.networkHandler.sendPacket(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.INITIALIZE));
         serverplayerentity.networkHandler.sendPacket(new WorldTimeUpdateS2CPacket(serverworld.getTime(), serverworld.getTimeOfDay(), serverworld.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)));
         serverplayerentity.networkHandler.sendPacket(new PlayerSpawnPositionS2CPacket(serverworld.getSpawnPos()));
         if (serverworld.isRaining()) {
-            serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.RAIN_STARTED, 0.0F));
-            serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.RAIN_GRADIENT_CHANGED, serverworld.getRainGradient(1.0F)));
-            serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.THUNDER_GRADIENT_CHANGED, serverworld.getThunderGradient(1.0F)));
+
+            // CraftBukkit start - handle player weather
+            // serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.RAIN_STARTED, 0.0F));
+            // serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.RAIN_GRADIENT_CHANGED, serverworld.getRainGradient(1.0F)));
+            // serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.THUNDER_GRADIENT_CHANGED, serverworld.getThunderGradient(1.0F)));
+            serverplayerentity.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+            serverplayerentity.updateWeather(-serverworld.rainGradient, serverworld.rainGradient, -serverworld.thunderGradient, serverworld.thunderGradient);
+            // CraftBukkit end
         }
 
     }
 
     public void sendPlayerStatus(ServerPlayerEntity serverplayerentity) {
         serverplayerentity.openHandledScreen((ScreenHandler) serverplayerentity.playerScreenHandler);
-        serverplayerentity.markHealthDirty();
+        // serverplayerentity.markHealthDirty();
+        serverplayerentity.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         serverplayerentity.networkHandler.sendPacket(new HeldItemChangeS2CPacket(serverplayerentity.inventory.selectedSlot));
+
+        // CraftBukkit start - from GameRules
+        int i = serverplayerentity.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23;
+        serverplayerentity.networkHandler.sendPacket(new EntityStatusS2CPacket(serverplayerentity, (byte) i));
+        float immediateRespawn = serverplayerentity.world.getGameRules().getBoolean(GameRules.DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+        serverplayerentity.networkHandler.sendPacket(new GameStateChangeS2CPacket(GameStateChangeS2CPacket.IMMEDIATE_RESPAWN, immediateRespawn));
+        // CraftBukkit end
     }
 
     public int getCurrentPlayerCount() {
@@ -805,27 +1086,49 @@
     }
 
     public void disconnectAllPlayers() {
-        for (int i = 0; i < this.players.size(); ++i) {
-            ((ServerPlayerEntity) this.players.get(i)).networkHandler.disconnect(new TranslatableText("multiplayer.disconnect.server_shutdown"));
+        // CraftBukkit start - disconnect safely
+        for (ServerPlayerEntity player : this.players) {
+            player.networkHandler.disconnect(this.cserver.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+        }
+        // CraftBukkit end
+    }
+
+    // CraftBukkit start
+    public void broadcastChatMessage(Text[] iChatBaseComponents) {
+        for (Text component : iChatBaseComponents) {
+            broadcastChatMessage(component, MessageType.SYSTEM, Util.NIL_UUID);
         }
+    }
 
+    public void broadcastChatMessage(Text text) {
+        this.broadcastChatMessage(text, MessageType.SYSTEM, Util.NIL_UUID);
     }
+    // CraftBukkit end
 
     public void broadcastChatMessage(Text text, MessageType messagetype, UUID uuid) {
         this.server.sendSystemMessage(text, uuid);
-        this.sendToAll(new GameMessageS2CPacket(text, messagetype, uuid));
+        // CraftBukkit start - we run this through our processor first so we can get web links etc
+        this.sendToAll(new GameMessageS2CPacket(CraftChatMessage.fixComponent(text), messagetype, uuid));
+        // CraftBukkit end
     }
 
-    public ServerStatHandler createStatHandler(PlayerEntity playerentity) {
-        UUID uuid = playerentity.getUuid();
-        ServerStatHandler serverstathandler = uuid == null ? null : (ServerStatHandler) this.statisticsMap.get(uuid);
+    // CraftBukkit start
+    public ServerStatHandler createStatHandler(ServerPlayerEntity playerentity) {
+        ServerStatHandler serverstatisticmanager = playerentity.getStatHandler();
+        return serverstatisticmanager == null ? createStatHandler(playerentity.getUuid(), playerentity.getDisplayName().getString()) : serverstatisticmanager;
+    }
+
+    public ServerStatHandler createStatHandler(UUID uuid, String displayName) {
+        ServerPlayerEntity playerentity = this.getPlayer(uuid);
+        ServerStatHandler serverstathandler = playerentity == null ? null : (ServerStatHandler) playerentity.getStatHandler();
+        // CraftBukkit end
 
         if (serverstathandler == null) {
             File file = this.server.getSavePath(WorldSavePath.STATS).toFile();
             File file1 = new File(file, uuid + ".json");
 
             if (!file1.exists()) {
-                File file2 = new File(file, playerentity.getName().getString() + ".json");
+                File file2 = new File(file, displayName + ".json"); // CraftBukkit
 
                 if (file2.exists() && file2.isFile()) {
                     file2.renameTo(file1);
@@ -833,7 +1136,7 @@
             }
 
             serverstathandler = new ServerStatHandler(this.server, file1);
-            this.statisticsMap.put(uuid, serverstathandler);
+            // this.statisticsMap.put(uuid, serverstathandler); // CraftBukkit
         }
 
         return serverstathandler;
@@ -841,14 +1144,14 @@
 
     public PlayerAdvancementTracker getAdvancementTracker(ServerPlayerEntity serverplayerentity) {
         UUID uuid = serverplayerentity.getUuid();
-        PlayerAdvancementTracker playeradvancementtracker = (PlayerAdvancementTracker) this.advancementTrackers.get(uuid);
+        PlayerAdvancementTracker playeradvancementtracker = (PlayerAdvancementTracker) serverplayerentity.getAdvancementTracker(); // CraftBukkit
 
         if (playeradvancementtracker == null) {
             File file = this.server.getSavePath(WorldSavePath.ADVANCEMENTS).toFile();
             File file1 = new File(file, uuid + ".json");
 
             playeradvancementtracker = new PlayerAdvancementTracker(this.server.getDataFixer(), this, this.server.getAdvancementLoader(), file1, serverplayerentity);
-            this.advancementTrackers.put(uuid, playeradvancementtracker);
+            // this.advancementTrackers.put(uuid, playeradvancementtracker); // Craftbukkit
         }
 
         playeradvancementtracker.setOwner(serverplayerentity);
@@ -884,13 +1187,21 @@
     }
 
     public void onDataPacksReloaded() {
+        // CraftBukkit start
+        /*
         Iterator iterator = this.advancementTrackers.values().iterator();
 
         while (iterator.hasNext()) {
             PlayerAdvancementTracker playeradvancementtracker = (PlayerAdvancementTracker) iterator.next();
 
             playeradvancementtracker.reload(this.server.getAdvancementLoader());
+        }*/
+
+        for (ServerPlayerEntity playerEntity : this.players) {
+            playerEntity.getAdvancementTracker().reload(this.server.getAdvancementLoader());
+            playerEntity.getAdvancementTracker().sendUpdate(playerEntity); // CraftBukkit - trigger immediate flush of advancements
         }
+        // CraftBukkit end
 
         this.sendToAll(new SynchronizeTagsS2CPacket(this.server.getTagManager()));
         SynchronizeRecipesS2CPacket synchronizerecipess2cpacket = new SynchronizeRecipesS2CPacket(this.server.getRecipeManager().values());
