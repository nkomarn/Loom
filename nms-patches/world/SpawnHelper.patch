--- a/net/minecraft/world/SpawnHelper.java
+++ b/net/minecraft/world/SpawnHelper.java
@@ -23,6 +23,7 @@
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.world.ServerWorld;
 import net.minecraft.tag.BlockTags;
 import net.minecraft.tag.FluidTags;
 import net.minecraft.util.collection.WeightedPicker;
@@ -65,7 +66,8 @@
             if (entity instanceof MobEntity) {
                 MobEntity mobentity = (MobEntity) entity;
 
-                if (mobentity.isPersistent() || mobentity.cannotDespawn()) {
+                // CraftBukkit - Split out persistent check, don't apply it to special persistent mobs
+                if (mobentity.canImmediatelyDespawn(0) && mobentity.isPersistent()) {
                     continue;
                 }
             }
@@ -101,10 +103,44 @@
         SpawnGroup[] aspawngroup = SpawnHelper.SPAWNABLE_GROUPS;
         int i = aspawngroup.length;
 
+        // CraftBukkit start - Other mob type spawn tick rate
+        WorldProperties worlddata = serverworld.getLevelProperties();
+        boolean spawnAnimalThisTick = serverworld.ticksPerAnimalSpawns != 0L && worlddata.getTime() % serverworld.ticksPerAnimalSpawns == 0L;
+        boolean spawnMonsterThisTick = serverworld.ticksPerMonsterSpawns != 0L && worlddata.getTime() % serverworld.ticksPerMonsterSpawns == 0L;
+        boolean spawnWaterThisTick = serverworld.ticksPerWaterSpawns != 0L && worlddata.getTime() % serverworld.ticksPerWaterSpawns == 0L;
+        boolean spawnAmbientThisTick = serverworld.ticksPerAmbientSpawns != 0L && worlddata.getTime() % serverworld.ticksPerAmbientSpawns == 0L;
+        // CraftBukkit end
+
         for (int j = 0; j < i; ++j) {
             SpawnGroup spawngroup = aspawngroup[j];
+            // CraftBukkit start - Use per-world spawn limits
+            boolean spawnThisTick = true;
+            int limit = spawngroup.getCapacity();
+            switch (spawngroup) {
+                case MONSTER:
+                    spawnThisTick = spawnMonsterThisTick;
+                    limit = serverworld.getCraftWorld().getMonsterSpawnLimit();
+                    break;
+                case CREATURE:
+                    spawnThisTick = spawnAnimalThisTick;
+                    limit = serverworld.getCraftWorld().getAnimalSpawnLimit();
+                    break;
+                case WATER_CREATURE:
+                    spawnThisTick = spawnWaterThisTick;
+                    limit = serverworld.getCraftWorld().getWaterAnimalSpawnLimit();
+                    break;
+                case AMBIENT:
+                    spawnThisTick = spawnAmbientThisTick;
+                    limit = serverworld.getCraftWorld().getAmbientSpawnLimit();
+                    break;
+            }
+
+            if (!spawnThisTick) {
+                continue;
+            }
 
-            if ((flag || !spawngroup.isPeaceful()) && (flag1 || spawngroup.isPeaceful()) && (flag2 || !spawngroup.isAnimal()) && spawnhelper_info.isBelowCap(spawngroup)) {
+            if ((flag || !spawngroup.isPeaceful()) && (flag1 || spawngroup.isPeaceful()) && (flag2 || !spawngroup.isAnimal()) && spawnhelper_info.isBelowCap(spawngroup, limit)) {
+                // CraftBukkit end
                 spawnEntitiesInChunk(spawngroup, serverworld, worldchunk, (entitytype, blockpos, chunk) -> {
                     return spawnhelper_info.test(entitytype, blockpos, chunk);
                 }, (mobentity, chunk) -> {
@@ -179,9 +215,13 @@
                                         mobentity.refreshPositionAndAngles(d0, (double) i, d1, serverworld.random.nextFloat() * 360.0F, 0.0F);
                                         if (isValidSpawn(serverworld, mobentity, d2)) {
                                             entitydata = mobentity.initialize(serverworld, serverworld.getLocalDifficulty(mobentity.getBlockPos()), SpawnReason.NATURAL, entitydata, (CompoundTag) null);
-                                            ++j;
-                                            ++k1;
-                                            serverworld.spawnEntity(mobentity);
+                                            // CraftBukkit start
+                                            if (serverworld.spawnEntity(mobentity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL)) {
+                                                ++j;
+                                                ++k1;
+                                                spawnhelper_runner.run(mobentity, chunk);
+                                            }
+                                            // CraftBukkit end
                                             spawnhelper_runner.run(mobentity, chunk);
                                             if (j >= mobentity.getLimitPerChunk()) {
                                                 return;
@@ -489,8 +529,10 @@
             return this.groupToCountView;
         }
 
-        private boolean isBelowCap(SpawnGroup spawngroup) {
-            int i = spawngroup.getCapacity() * this.spawningChunkCount / SpawnHelper.CHUNK_AREA;
+        // CraftBukkit start
+        private boolean isBelowCap(SpawnGroup spawngroup, int limit) {
+            int i = limit * this.spawningChunkCount / SpawnHelper.CHUNK_AREA;
+            // CraftBukkit end
 
             return this.groupToCount.getInt(spawngroup) < i;
         }
