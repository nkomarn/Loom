--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -62,6 +62,21 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.HashMap;
+import java.util.Map;
+import net.minecraft.network.packet.s2c.play.WorldBorderS2CPacket;
+import net.minecraft.server.world.ServerWorld;
+import net.minecraft.world.border.WorldBorderListener;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CapturedBlockState;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import net.minecraft.entity.ItemEntity;
+// CraftBukkit end
+
 public abstract class World implements WorldAccess, AutoCloseable {
 
     protected static final Logger LOGGER = LogManager.getLogger();
@@ -74,15 +89,15 @@
     public final List<BlockEntity> tickingBlockEntities = Lists.newArrayList();
     protected final List<BlockEntity> pendingBlockEntities = Lists.newArrayList();
     protected final List<BlockEntity> unloadedBlockEntities = Lists.newArrayList();
-    private final Thread thread;
+    public final Thread thread;
     private final boolean debugWorld;
     private int ambientDarkness;
     protected int lcgBlockSeed = (new Random()).nextInt();
     protected final int unusedIncrement = 1013904223;
     protected float rainGradientPrev;
-    protected float rainGradient;
+    public float rainGradient; // Loom - public access
     protected float thunderGradientPrev;
-    protected float thunderGradient;
+    public float thunderGradient; // Loom - public access
     public final Random random = new Random();
     private final DimensionType dimension;
     protected final MutableWorldProperties properties;
@@ -94,7 +109,39 @@
     private final RegistryKey<World> registryKey;
     private final RegistryKey<DimensionType> dimensionRegistryKey;
 
-    protected World(MutableWorldProperties mutableworldproperties, RegistryKey<World> registrykey, RegistryKey<DimensionType> registrykey1, DimensionType dimensiontype, Supplier<Profiler> supplier, boolean flag, boolean flag1, long i) {
+    // CraftBukkit start Added the following
+    private final CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public org.bukkit.generator.ChunkGenerator generator;
+
+    public boolean captureBlockStates = false;
+    public boolean captureTreeGeneration = false;
+    public Map<BlockPos, CapturedBlockState> capturedBlockStates = new HashMap<>();
+    public Map<BlockPos, BlockEntity> capturedBlockEntities = new HashMap<>();
+    public List<ItemEntity> captureDrops;
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public long ticksPerWaterSpawns;
+    public long ticksPerAmbientSpawns;
+    public boolean populating;
+
+    public CraftWorld getCraftWorld() {
+        return this.world;
+    }
+
+    public CraftServer getCraftServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
+
+    protected World(MutableWorldProperties mutableworldproperties, RegistryKey<World> registrykey, RegistryKey<DimensionType> registrykey1, DimensionType dimensiontype, Supplier<Profiler> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env) {
+        this.generator = gen;
+        this.world = new CraftWorld((ServerWorld) this, gen, env);
+        this.ticksPerAnimalSpawns = this.getCraftServer().getTicksPerAnimalSpawns(); // CraftBukkit
+        this.ticksPerMonsterSpawns = this.getCraftServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        this.ticksPerWaterSpawns = this.getCraftServer().getTicksPerWaterSpawns(); // CraftBukkit
+        this.ticksPerAmbientSpawns = this.getCraftServer().getTicksPerAmbientSpawns(); // CraftBukkit
+        // CraftBukkit end
         this.profiler = supplier;
         this.properties = mutableworldproperties;
         this.dimension = dimensiontype;
@@ -118,6 +165,44 @@
         this.thread = Thread.currentThread();
         this.biomeAccess = new BiomeAccess(this, i, dimensiontype.getBiomeAccessType());
         this.debugWorld = flag1;
+        // CraftBukkit start
+        getWorldBorder().world = (ServerWorld) this;
+        // From PlayerList.setPlayerFileData
+        getWorldBorder().addListener(new WorldBorderListener() {
+            @Override
+            public void onSizeChange(WorldBorder worldborder, double d) {
+                getCraftServer().getHandle().sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_SIZE), worldborder.world); // TODO patch
+            }
+
+            @Override
+            public void onInterpolateSize(WorldBorder worldborder, double d, double e, long l) {
+                getCraftServer().getHandle().sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.LERP_SIZE), worldborder.world); // TODO patch
+            }
+
+            @Override
+            public void onCenterChanged(WorldBorder worldborder, double d, double e) {
+                getCraftServer().getHandle().sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_CENTER), worldborder.world); // TODO patch
+            }
+
+            @Override
+            public void onWarningTimeChanged(WorldBorder worldborder, int i) {
+                getCraftServer().getHandle().sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_TIME), worldborder.world); // TODO patch
+            }
+
+            @Override
+            public void onWarningBlocksChanged(WorldBorder worldborder, int i) {
+                getCraftServer().getHandle().sendToAll(new WorldBorderS2CPacket(worldborder, WorldBorderS2CPacket.Type.SET_WARNING_BLOCKS), worldborder.world); // TODO patch
+            }
+
+            @Override
+            public void onDamagePerBlockChanged(WorldBorder arg, double d) {
+            }
+
+            @Override
+            public void onSafeZoneChanged(WorldBorder arg, double d) {
+            }
+        });
+        // CraftBukkit end
     }
 
     public boolean isClient() {
@@ -164,7 +249,7 @@
         VoxelShape voxelshape = predicate.test(blockstate) ? VoxelShapes.empty() : blockstate.getCollisionShape(this, blockpos);
 
         if (voxelshape.isEmpty()) {
-            BlockPos blockpos1 = blockpos.down();
+            BlockPos blockpos1 = blockpos.down(); // TODO i don't get it..
             BlockState blockstate1 = this.getBlockState(blockpos1);
             VoxelShape voxelshape1 = predicate.test(blockstate1) ? VoxelShapes.empty() : blockstate1.getCollisionShape(this, blockpos1);
             double d0 = voxelshape1.getMax(Direction.Axis.Y);
@@ -217,6 +302,17 @@
     }
 
     public boolean setBlockState(BlockPos blockpos, BlockState blockstate, int i, int j) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            CapturedBlockState blockstate2 = capturedBlockStates.get(blockpos);
+            if (blockstate2 == null) {
+                blockstate2 = CapturedBlockState.getTreeBlockState(this, blockpos, i);
+                this.capturedBlockStates.put(blockpos.toImmutable(), blockstate2);
+            }
+            blockstate2.setData(blockstate);
+            return true;
+        }
+        // CraftBukkit end
         if (isHeightInvalid(blockpos)) {
             return false;
         } else if (!this.isClient && this.isDebugWorld()) {
@@ -224,9 +320,23 @@
         } else {
             WorldChunk worldchunk = this.getWorldChunk(blockpos);
             Block block = blockstate.getBlock();
-            BlockState blockstate1 = worldchunk.setBlockState(blockpos, blockstate, (i & 64) != 0);
+            // CraftBukkit start - capture blockstates
+            boolean captured = false;
+            if (this.captureBlockStates && !this.capturedBlockStates.containsKey(blockpos)) {
+                CapturedBlockState blockstate3 = CapturedBlockState.getBlockState(this, blockpos, i);
+                this.capturedBlockStates.put(blockpos.toImmutable(), blockstate3);
+                captured = true;
+            }
+            // CraftBukkit end
+
+            BlockState blockstate1 = worldchunk.setBlockState(blockpos, blockstate, (i & 64) != 0, (i & 1024) == 0); // CraftBukkit custom NO_PLACE flag // TODO patch
 
             if (blockstate1 == null) {
+                // CraftBukkit start - remove blockstate if failed (or the same)
+                if (this.captureBlockStates && captured) {
+                    this.capturedBlockStates.remove(blockpos);
+                }
+                // CraftBukkit end
                 return false;
             } else {
                 BlockState blockstate2 = this.getBlockState(blockpos);
@@ -237,6 +347,7 @@
                     this.getProfiler().pop();
                 }
 
+                /*
                 if (blockstate2 == blockstate) {
                     if (blockstate1 != blockstate2) {
                         this.scheduleBlockRerenderIfNeeded(blockpos, blockstate1, blockstate2);
@@ -263,12 +374,65 @@
 
                     this.onBlockChanged(blockpos, blockstate1, blockstate2);
                 }
+                */
+
+                // CraftBukkit start
+                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+                    // Modularize client and physic updates
+                    notifyAndUpdatePhysics(blockpos, worldchunk, blockstate1, blockstate, blockstate2, i);
+                }
+                // CraftBukkit end
 
                 return true;
             }
         }
     }
 
+    // CraftBukkit start - Split off from above in order to directly send client and physic updates
+    public void notifyAndUpdatePhysics(BlockPos blockposition, WorldChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i) {
+        BlockState iblockdata = newBlock;
+        BlockState iblockdata1 = oldBlock;
+        BlockState iblockdata2 = actualBlock;
+        if (iblockdata2 == iblockdata) {
+            if (iblockdata1 != iblockdata2) {
+                this.scheduleBlockRerenderIfNeeded(blockposition, iblockdata1, iblockdata2);
+            }
+
+            if ((i & 2) != 0 && (!this.isClient || (i & 4) == 0) && (this.isClient || chunk == null || (chunk.getLevelType() != null && chunk.getLevelType().isAfter(ChunkHolder.LevelType.TICKING)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+                this.updateListeners(blockposition, iblockdata1, iblockdata, i);
+            }
+
+            if (!this.isClient && (i & 1) != 0) {
+                this.updateNeighbors(blockposition, iblockdata1.getBlock());
+                if (iblockdata.hasComparatorOutput()) { // isComplexRedstone
+                    this.updateComparators(blockposition, newBlock.getBlock());
+                }
+            }
+
+            if ((i & 16) == 0) {
+                int j = i & -2;
+
+                // CraftBukkit start
+                iblockdata1.method_30102(this, blockposition, j); // Don't call an event for the old block to limit event spam
+                CraftWorld world = ((ServerWorld) this).getCraftWorld();
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftBlockData.fromData(iblockdata));
+                    this.getCraftServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
+                // CraftBukkit end
+                iblockdata.method_30101(this, blockposition, j);
+                iblockdata.method_30102(this, blockposition, j);
+            }
+
+            this.onBlockChanged(blockposition, iblockdata1, iblockdata2);
+        }
+    }
+    // CraftBukkit end
+
     public void onBlockChanged(BlockPos blockpos, BlockState blockstate, BlockState blockstate1) {}
 
     public boolean removeBlock(BlockPos blockpos, boolean flag) {
@@ -348,6 +512,17 @@
             BlockState blockstate = this.getBlockState(blockpos);
 
             try {
+                // CraftBukkit start
+                CraftWorld world = ((ServerWorld) this).getCraftWorld();
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockpos.getX(), blockpos.getY(), blockpos.getZ()), CraftBlockData.fromData(blockstate), world.getBlockAt(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ()));
+                    this.getCraftServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 blockstate.neighborUpdate(this, blockpos, block, blockpos1, false);
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.create(throwable, "Exception while updating neighbours");
@@ -387,6 +562,14 @@
     }
 
     public BlockState getBlockState(BlockPos blockpos) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            CapturedBlockState previous = capturedBlockStates.get(blockpos);
+            if (previous != null) {
+                return previous.getHandle();
+            }
+        }
+        // CraftBukkit end
         if (isHeightInvalid(blockpos)) {
             return Blocks.VOID_AIR.getDefaultState();
         } else {
@@ -531,9 +714,11 @@
                 BlockEntity blockentity1 = (BlockEntity) this.pendingBlockEntities.get(i);
 
                 if (!blockentity1.isRemoved()) {
+                    /* CraftBukkit start - Order matters, moved down
                     if (!this.blockEntities.contains(blockentity1)) {
                         this.addBlockEntity(blockentity1);
                     }
++                    // CraftBukkit end */
 
                     if (this.isChunkLoaded(blockentity1.getPos())) {
                         WorldChunk worldchunk = this.getWorldChunk(blockentity1.getPos());
@@ -541,6 +726,12 @@
 
                         worldchunk.setBlockEntity(blockentity1.getPos(), blockentity1);
                         this.updateListeners(blockentity1.getPos(), blockstate, blockstate, 3);
+                        // CraftBukkit start
+                        // From above, don't screw this up - SPIGOT-1746
+                        if (!this.blockEntities.contains(blockentity1)) {
+                            this.addBlockEntity(blockentity1);
+                        }
+                        // CraftBukkit end
                     }
                 }
             }
@@ -581,11 +772,21 @@
 
     @Nullable
     public BlockEntity getBlockEntity(BlockPos blockpos) {
+        return getBlockEntity(blockpos, true);
+    }
+
+    @Nullable
+    public BlockEntity getBlockEntity(BlockPos blockpos, boolean validate) {
         if (isHeightInvalid(blockpos)) {
             return null;
         } else if (!this.isClient && Thread.currentThread() != this.thread) {
             return null;
         } else {
+            // CraftBukkit start
+            if (capturedBlockEntities.containsKey(blockpos)) {
+                return capturedBlockEntities.get(blockpos);
+            }
+            // CraftBukkit end
             BlockEntity blockentity = null;
 
             if (this.iteratingTickingBlockEntities) {
@@ -620,6 +821,13 @@
     public void setBlockEntity(BlockPos blockpos, @Nullable BlockEntity blockentity) {
         if (!isHeightInvalid(blockpos)) {
             if (blockentity != null && !blockentity.isRemoved()) {
+                // CraftBukkit start
+                if (captureBlockStates) {
+                    blockentity.setLocation(this, blockpos);
+                    capturedBlockEntities.put(blockpos.toImmutable(), blockentity);
+                    return;
+                }
+                // CraftBukkit end
                 if (this.iteratingTickingBlockEntities) {
                     blockentity.setLocation(this, blockpos);
                     Iterator iterator = this.pendingBlockEntities.iterator();
@@ -644,7 +852,7 @@
     }
 
     public void removeBlockEntity(BlockPos blockpos) {
-        BlockEntity blockentity = this.getBlockEntity(blockpos);
+        BlockEntity blockentity = this.getBlockEntity(blockpos, false); // CraftBukkit
 
         if (blockentity != null && this.iteratingTickingBlockEntities) {
             blockentity.markRemoved();
@@ -1081,7 +1289,11 @@
         return this.debugWorld;
     }
 
+    // Loom start
+    /*
     public Chunk getChunk(int i, int j) {
         return this.getChunk(i, j);
     }
+     */
+    // Loom end
 }
