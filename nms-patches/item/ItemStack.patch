--- a/net/minecraft/item/ItemStack.java
+++ b/net/minecraft/item/ItemStack.java
@@ -58,6 +58,38 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.List;
+import java.util.Map;
+import net.minecraft.block.Blocks;
+import net.minecraft.block.SaplingBlock;
+import net.minecraft.block.BlockWithEntity;
+import net.minecraft.block.WitherSkullBlock;
+import net.minecraft.block.JukeboxBlock;
+import net.minecraft.block.entity.BlockEntity;
+import net.minecraft.block.entity.SignBlockEntity;
+import net.minecraft.block.entity.SkullBlockEntity;
+import net.minecraft.datafixer.NbtOps;
+import net.minecraft.datafixer.TypeReferences;
+import net.minecraft.network.packet.s2c.play.BlockUpdateS2CPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.world.ServerWorld;
+import net.minecraft.sound.BlockSoundGroup;
+import net.minecraft.sound.SoundCategory;
+import com.mojang.serialization.Dynamic;
+import net.minecraft.util.math.Direction;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockFertilizeEvent;
+import org.bukkit.event.player.PlayerItemDamageEvent;
+import org.bukkit.event.world.StructureGrowEvent;
+// CraftBukkit end
+
 public final class ItemStack {
 
     public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((recordcodecbuilder_instance) -> {
@@ -78,7 +110,7 @@
     private int count;
     private int cooldown;
     @Deprecated
-    private final Item item;
+    private Item item;
     private CompoundTag tag;
     private boolean empty;
     private Entity holder;
@@ -106,12 +138,24 @@
         this.updateEmptyState();
     }
 
+    // Called to run this stack through the data converter to handle older storage methods and serialized items
+    public void convertStack(int version) {
+        if (0 < version && version < CraftMagicNumbers.INSTANCE.getDataVersion()) {
+            CompoundTag savedStack = new CompoundTag();
+            this.toTag(savedStack);
+            savedStack = (CompoundTag) MinecraftServer.getServer().getDataFixer().update(TypeReferences.ITEM_STACK, new Dynamic(NbtOps.INSTANCE, savedStack), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+            this.load(savedStack);
+        }
+    }
+
     private void updateEmptyState() {
+        if (this.empty && this == ItemStack.EMPTY) throw new AssertionError("TRAP"); // CraftBukkit
         this.empty = false;
         this.empty = this.isEmpty();
     }
 
-    private ItemStack(CompoundTag compoundtag) {
+    // CraftBukkit - break into own method
+    private void load(CompoundTag compoundtag) {
         this.item = (Item) Registry.ITEM.get(new Identifier(compoundtag.getString("id")));
         this.count = compoundtag.getByte("Count");
         if (compoundtag.contains("tag", 10)) {
@@ -122,7 +166,11 @@
         if (this.getItem().isDamageable()) {
             this.setDamage(this.getDamage());
         }
+    }
 
+    private ItemStack(CompoundTag compoundtag) {
+        this.load(compoundtag);
+        // CraftBukkit end
         this.updateEmptyState();
     }
 
@@ -152,7 +200,7 @@
         return this.empty ? Items.AIR : this.item;
     }
 
-    public ActionResult useOnBlock(ItemUsageContext itemusagecontext) {
+    public ActionResult useOnBlock(ItemUsageContext itemusagecontext, Hand hand) {
         PlayerEntity playerentity = itemusagecontext.getPlayer();
         BlockPos blockpos = itemusagecontext.getBlockPos();
         CachedBlockPosition cachedblockposition = new CachedBlockPosition(itemusagecontext.getWorld(), blockpos, false);
@@ -160,13 +208,157 @@
         if (playerentity != null && !playerentity.abilities.allowModifyWorld && !this.canPlaceOn(itemusagecontext.getWorld().getTagManager(), cachedblockposition)) {
             return ActionResult.PASS;
         } else {
+            // CraftBukkit start - handle all block place event logic here
+            CompoundTag oldData = this.getTagClone();
+            int oldCount = this.getCount();
+            ServerWorld world = (ServerWorld) itemusagecontext.getWorld();
+
+            if (!(this.getItem() instanceof BucketItem)) { // if not bucket
+                world.captureBlockStates = true;
+                // special case bonemeal
+                if (this.getItem() == Items.BONE_MEAL) {
+                    world.captureTreeGeneration = true;
+                }
+            }
             Item item = this.getItem();
             ActionResult actionresult = item.useOnBlock(itemusagecontext);
 
+            CompoundTag newData = this.getTagClone();
+            int newCount = this.getCount();
+            this.setCount(oldCount);
+            this.setTagClone(oldData);
+            world.captureBlockStates = false;
+            if (actionresult.isAccepted() && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
+                world.captureTreeGeneration = false;
+                Location location = new Location(world.getCraftWorld(), blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                TreeType treeType = SaplingBlock.treeType;
+                SaplingBlock.treeType = null;
+                List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+                world.capturedBlockStates.clear();
+                StructureGrowEvent structureEvent = null;
+                if (treeType != null) {
+                    boolean isBonemeal = getItem() == Items.BONE_MEAL;
+                    structureEvent = new StructureGrowEvent(location, treeType, isBonemeal, (Player) playerentity.getBukkitEntity(), blocks);
+                    org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+                }
+
+                BlockFertilizeEvent fertilizeEvent = new BlockFertilizeEvent(CraftBlock.at(world, blockpos), (Player) playerentity.getBukkitEntity(), blocks);
+                fertilizeEvent.setCancelled(structureEvent != null && structureEvent.isCancelled());
+                org.bukkit.Bukkit.getPluginManager().callEvent(fertilizeEvent);
+
+                if (!fertilizeEvent.isCancelled()) {
+                    // Change the stack to its new contents if it hasn't been tampered with.
+                    if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                        this.setTag(newData);
+                        this.setCount(newCount);
+                    }
+                    for (org.bukkit.block.BlockState blockstate : blocks) {
+                        blockstate.update(true);
+                    }
+                }
+
+                return actionresult;
+            }
+            world.captureTreeGeneration = false;
+
             if (playerentity != null && actionresult.isAccepted()) {
-                playerentity.incrementStat(Stats.USED.getOrCreateStat(item));
+//                playerentity.incrementStat(Stats.USED.getOrCreateStat(item));
+                org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
+                List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+                world.capturedBlockStates.clear();
+                if (blocks.size() > 1) {
+                    placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockMultiPlaceEvent(world, playerentity, hand, blocks, blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                } else if (blocks.size() == 1) {
+                    placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, playerentity, hand, blocks.get(0), blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                }
+
+                if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                    actionresult = ActionResult.FAIL; // cancel placement
+                    // PAIL: Remove this when MC-99075 fixed
+                    placeEvent.getPlayer().updateInventory();
+                    // revert back all captured blocks
+                    for (org.bukkit.block.BlockState blockstate : blocks) {
+                        blockstate.update(true, false);
+                    }
+
+                    // Brute force all possible updates
+                    BlockPos placedPos = ((CraftBlock) placeEvent.getBlock()).getPosition();
+                    for (Direction dir : Direction.values()) {
+                        ((ServerPlayerEntity) playerentity).networkHandler.sendPacket(new BlockUpdateS2CPacket(world, placedPos.offset(dir)));
+                    }
+                } else {
+                    // Change the stack to its new contents if it hasn't been tampered with.
+                    if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                        this.setTag(newData);
+                        this.setCount(newCount);
+                    }
+
+                    for (Map.Entry<BlockPos, BlockEntity> e : world.capturedBlockEntities.entrySet()) {
+                        world.setBlockEntity(e.getKey(), e.getValue());
+                    }
+
+                    for (org.bukkit.block.BlockState blockstate : blocks) {
+                        int updateFlag = ((CraftBlockState) blockstate).getFlag();
+                        BlockState oldBlock = ((CraftBlockState) blockstate).getHandle();
+                        BlockPos newblockposition = ((CraftBlockState) blockstate).getPosition();
+                        BlockState block = world.getBlockState(newblockposition);
+
+                        if (!(block.getBlock() instanceof BlockWithEntity)) { // Containers get placed automatically
+                            block.getBlock().onBlockAdded(block, world, newblockposition, oldBlock, true);
+                        }
+
+                        world.notifyAndUpdatePhysics(newblockposition, null, oldBlock, block, world.getBlockState(newblockposition), updateFlag); // send null chunk as chunk.k() returns false by this point
+                    }
+
+                    // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
+                    // PAIL: checkme on updates.
+                    if (this.item instanceof MusicDiscItem) {
+                        ((JukeboxBlock) Blocks.JUKEBOX).setRecord(world, blockpos, world.getBlockState(blockpos), this);
+                        world.syncWorldEvent((PlayerEntity) null, 1010, blockpos, Item.getRawId(this.item));
+                        this.decrement(1);
+                        playerentity.incrementStat(Stats.PLAY_RECORD);
+                    }
+
+                    if (this.item == Items.WITHER_SKELETON_SKULL) { // Special case skulls to allow wither spawns to be cancelled
+                        BlockPos bp = blockpos;
+                        if (!world.getBlockState(blockpos).getMaterial().isReplaceable()) {
+                            if (!world.getBlockState(blockpos).getMaterial().isSolid()) {
+                                bp = null;
+                            } else {
+                                bp = bp.offset(itemusagecontext.getSide());
+                            }
+                        }
+                        if (bp != null) {
+                            BlockEntity te = world.getBlockEntity(bp);
+                            if (te instanceof SkullBlockEntity) {
+                                WitherSkullBlock.onPlaced(world, bp, (SkullBlockEntity) te);
+                            }
+                        }
+                    }
+
+                    // SPIGOT-4678
+                    if (this.item instanceof SignItem && SignItem.openSign != null) {
+                        try {
+                            playerentity.openEditSignScreen((SignBlockEntity) world.getBlockEntity(SignItem.openSign));
+                        } finally {
+                            SignItem.openSign = null;
+                        }
+                    }
+
+                    // SPIGOT-1288 - play sound stripped from ItemBlock
+                    if (this.item instanceof BlockItem) {
+                        BlockSoundGroup soundeffecttype = ((BlockItem) this.item).getBlock().getDefaultState().getSoundGroup(); // todo check?
+                        world.playSound(playerentity, blockpos, soundeffecttype.getPlaceSound(), SoundCategory.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F);
+                    }
+
+                    playerentity.incrementStat(Stats.USED.getOrCreateStat(item));
+                }
             }
 
+            world.capturedBlockEntities.clear();
+            world.capturedBlockStates.clear();
+            // CraftBukkit end
+
             return actionresult;
         }
     }
@@ -246,6 +438,22 @@
                 }
 
                 i -= k;
+                // CraftBukkit start
+                if (serverplayerentity != null) {
+                    PlayerItemDamageEvent event = new PlayerItemDamageEvent((Player) serverplayerentity.getBukkitEntity(), CraftItemStack.asCraftMirror(this), i);
+                    event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+                    if (i != event.getDamage() || event.isCancelled()) {
+                        event.getPlayer().updateInventory();
+                    }
+                    if (event.isCancelled()) {
+                        return false;
+                    }
+
+                    i = event.getDamage();
+                }
+                // CraftBukkit end
+
                 if (i <= 0) {
                     return false;
                 }
@@ -267,6 +475,11 @@
                 if (this.damage(i, t0.getRandom(), t0 instanceof ServerPlayerEntity ? (ServerPlayerEntity) t0 : null)) {
                     consumer.accept(t0);
                     Item item = this.getItem();
+                    // CraftBukkit start - Check for item breaking
+                    if (this.count == 1 && t0 instanceof PlayerEntity) {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemBreakEvent((PlayerEntity) t0, this);
+                    }
+                    // CraftBukkit end
 
                     this.decrement(1);
                     if (t0 instanceof PlayerEntity) {
@@ -398,6 +611,18 @@
         return this.tag;
     }
 
+    // CraftBukkit start
+    @Nullable
+    private CompoundTag getTagClone() {
+        return this.tag == null ? null : this.tag.copy();
+    }
+
+    private void setTagClone(@Nullable CompoundTag nbtttagcompound) {
+        this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+    }
+    // CraftBukkit end
+
+
     public CompoundTag getOrCreateTag() {
         if (this.tag == null) {
             this.setTag(new CompoundTag());
@@ -555,6 +780,12 @@
     }
 
     public void setRepairCost(int i) {
+        // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
+        if (i == 0) {
+            this.removeSubTag("RepairCost");
+            return;
+        }
+        // CraftBukkit end
         this.getOrCreateTag().putInt("RepairCost", i);
     }
 
@@ -604,6 +835,13 @@
         listtag.add(compoundtag);
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void setItem(Item item) {
+        this.item = item;
+    }
+    // CraftBukkit end
+
     public Text toHoverableText() {
         MutableText mutabletext = (new LiteralText("")).append(this.getName());
 
