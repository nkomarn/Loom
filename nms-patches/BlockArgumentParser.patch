--- a/net/minecraft/command/arguments/BlockArgumentParser.java
+++ b/net/minecraft/command/arguments/BlockArgumentParser.java
@@ -55,7 +55,7 @@
     };
     private final StringReader reader;
     private final boolean allowTag;
-    private final Map<Property<?>, Comparable<?>> blockProperties = Maps.newHashMap();
+    private final Map<Property<?>, Comparable<?>> blockProperties = Maps.newLinkedHashMap(); // CraftBukkit - stable
     private final Map<String, String> tagProperties = Maps.newHashMap();
     private Identifier blockId = new Identifier("");
     private StateManager<Block, BlockState> stateFactory;
@@ -231,7 +231,7 @@
         Iterator iterator = property.getValues().iterator();
 
         while (iterator.hasNext()) {
-            T t0 = (Comparable) iterator.next();
+            T t0 = (T) iterator.next(); // CraftBukkit - decompile error
 
             if (t0 instanceof Integer) {
                 suggestionsbuilder.suggest((Integer) t0);
@@ -500,7 +500,7 @@
         Optional<T> optional = property.parse(s);
 
         if (optional.isPresent()) {
-            this.blockState = (BlockState) this.blockState.with(property, (Comparable) optional.get());
+            this.blockState = (BlockState) this.blockState.with(property, (T) optional.get()); // CraftBukkit - decompile error
             this.blockProperties.put(property, optional.get());
         } else {
             this.reader.setCursor(i);
@@ -534,7 +534,7 @@
     private static <T extends Comparable<T>> void stringifyProperty(StringBuilder stringbuilder, Property<T> property, Comparable<?> comparable) {
         stringbuilder.append(property.getName());
         stringbuilder.append('=');
-        stringbuilder.append(property.name(comparable));
+        stringbuilder.append(property.name((T) comparable)); // CraftBukkit - decompile error
     }
 
     public CompletableFuture<Suggestions> getSuggestions(SuggestionsBuilder suggestionsbuilder, TagContainer<Block> tagcontainer) {
