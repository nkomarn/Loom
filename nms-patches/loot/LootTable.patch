--- a/net/minecraft/loot/LootTable.java
+++ b/net/minecraft/loot/LootTable.java
@@ -30,6 +30,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.world.LootGenerateEvent;
+// CraftBukkit end
+
 public class LootTable {
 
     private static final Logger LOGGER = LogManager.getLogger();
@@ -114,8 +121,21 @@
     }
 
     public void supplyInventory(Inventory inventory, LootContext lootcontext) {
+        // CraftBukkit start
+        this.supplyInventory(inventory, lootcontext, false);
+    }
+
+    public void supplyInventory(Inventory inventory, LootContext lootcontext, boolean plugin) {
+        // CraftBukkit end
         List<ItemStack> list = this.generateLoot(lootcontext);
         Random random = lootcontext.getRandom();
+        // CraftBukkit start
+        LootGenerateEvent event = CraftEventFactory.callLootGenerateEvent(inventory, this, lootcontext, list, plugin);
+        if (event.isCancelled()) {
+            return;
+        }
+        list = event.getLoot().stream().map(CraftItemStack::asNMSCopy).collect(Collectors.toList());
+        // CraftBukkit end
         List<Integer> list1 = this.getFreeSlots(inventory, random);
 
         this.shuffle(list, list1.size(), random);
@@ -240,6 +260,7 @@
             return jsonobject;
         }
 
+        /*
         public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
             return this.serialize((LootTable) object, type, jsonserializationcontext);
         }
@@ -247,6 +268,7 @@
         public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             return this.deserialize(jsonelement, type, jsondeserializationcontext);
         }
+        */ // Loom - decompile error
     }
 
     public static class Builder implements LootFunctionConsumingBuilder<LootTable.Builder> {
@@ -282,6 +304,7 @@
             return new LootTable(this.type, (LootPool[]) this.pools.toArray(new LootPool[0]), (LootFunction[]) this.functions.toArray(new LootFunction[0]));
         }
 
+        /*
         public Object getThis() {
             return this.getThis();
         }
@@ -289,5 +312,6 @@
         public Object apply(LootFunction.Builder lootfunction_builder) {
             return this.apply(lootfunction_builder);
         }
+        */ // Loom - decompile error
     }
 }
