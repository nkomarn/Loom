--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -5,6 +5,7 @@
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
+
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Iterator;
@@ -15,6 +16,7 @@
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
 import net.minecraft.SharedConstants;
 import net.minecraft.advancement.criterion.Criteria;
 import net.minecraft.block.BedBlock;
@@ -106,6 +108,12 @@
 import net.minecraft.world.GameMode;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
 
 public abstract class PlayerEntity extends LivingEntity {
 
@@ -148,6 +156,16 @@
     @Nullable
     public FishingBobberEntity fishHook;
 
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     public PlayerEntity(World world, BlockPos blockpos, GameProfile gameprofile) {
         super(EntityType.PLAYER, world);
         this.selectedItem = ItemStack.EMPTY;
@@ -283,7 +301,7 @@
         ItemStack itemstack = this.getEquippedStack(EquipmentSlot.HEAD);
 
         if (itemstack.getItem() == Items.TURTLE_HELMET && !this.isSubmergedIn(FluidTags.WATER)) {
-            this.addStatusEffect(new StatusEffectInstance(StatusEffects.WATER_BREATHING, 200, 0, false, false, true));
+            this.addStatusEffect(new StatusEffectInstance(StatusEffects.WATER_BREATHING, 200, 0, false, false, true), EntityPotionEffectEvent.Cause.TURTLE_HELMET); // CraftBukkit
         }
 
     }
@@ -394,7 +412,8 @@
         this.world.playSound(this, this.getX(), this.getY(), this.getZ(), soundevent, this.getSoundCategory(), f, f1);
     }
 
-    public void playSound(SoundEvent soundevent, SoundCategory soundcategory, float f, float f1) {}
+    public void playSound(SoundEvent soundevent, SoundCategory soundcategory, float f, float f1) {
+    }
 
     public SoundCategory getSoundCategory() {
         return SoundCategory.PLAYERS;
@@ -437,7 +456,8 @@
 
         if (this.world.getDifficulty() == Difficulty.PEACEFUL && this.world.getGameRules().getBoolean(GameRules.NATURAL_REGENERATION)) {
             if (this.getHealth() < this.getMaxHealth() && this.age % 20 == 0) {
-                this.heal(1.0F);
+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN);
             }
 
             if (this.hungerManager.isNotFull() && this.age % 10 == 0) {
@@ -618,6 +638,30 @@
                 itementity.setVelocity((double) (-f3 * f2 * 0.3F) + Math.cos((double) f5) * (double) f6, (double) (-f1 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (f4 * f2 * 0.3F) + Math.sin((double) f5) * (double) f6);
             }
 
+            // CraftBukkit start - fire PlayerDropItemEvent
+            Player player = (Player) this.getBukkitEntity();
+            Item drop = (Item) itementity.getBukkitEntity();
+
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                if (flag1 && (cur == null || cur.getAmount() == 0)) {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                } else if (flag1 && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                } else {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+                return null;
+            }
+            // CraftBukkit end
+
             return itementity;
         }
     }
@@ -740,16 +784,17 @@
         if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else if (this.abilities.invulnerable && !damagesource.isOutOfWorld()) {
+            this.forceExplosionKnockback = true; // SPIGOT-5258 - Make invulnerable players get knockback from explosions
             return false;
         } else {
             this.despawnCounter = 0;
             if (this.isDead()) {
                 return false;
             } else {
-                this.dropShoulderEntities();
+                // this.dropShoulderEntities(); // CraftBukkit - moved down
                 if (damagesource.isScaledWithDifficulty()) {
                     if (this.world.getDifficulty() == Difficulty.PEACEFUL) {
-                        f = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (this.world.getDifficulty() == Difficulty.EASY) {
@@ -761,7 +806,13 @@
                     }
                 }
 
-                return f == 0.0F ? false : super.damage(damagesource, f);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.damage(damagesource, f);
+                if (damaged) {
+                    this.dropShoulderEntities();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -845,25 +896,33 @@
         return !this.abilities.flying && super.isOnSoulSpeedBlock();
     }
 
-    public void openEditSignScreen(SignBlockEntity signblockentity) {}
+    public void openEditSignScreen(SignBlockEntity signblockentity) {
+    }
 
-    public void openCommandBlockMinecartScreen(CommandBlockExecutor commandblockexecutor) {}
+    public void openCommandBlockMinecartScreen(CommandBlockExecutor commandblockexecutor) {
+    }
 
-    public void openCommandBlockScreen(CommandBlockBlockEntity commandblockblockentity) {}
+    public void openCommandBlockScreen(CommandBlockBlockEntity commandblockblockentity) {
+    }
 
-    public void openStructureBlockScreen(StructureBlockBlockEntity structureblockblockentity) {}
+    public void openStructureBlockScreen(StructureBlockBlockEntity structureblockblockentity) {
+    }
 
-    public void openJigsawScreen(JigsawBlockEntity jigsawblockentity) {}
+    public void openJigsawScreen(JigsawBlockEntity jigsawblockentity) {
+    }
 
-    public void openHorseInventory(HorseBaseEntity horsebaseentity, Inventory inventory) {}
+    public void openHorseInventory(HorseBaseEntity horsebaseentity, Inventory inventory) {
+    }
 
     public OptionalInt openHandledScreen(@Nullable NamedScreenHandlerFactory namedscreenhandlerfactory) {
         return OptionalInt.empty();
     }
 
-    public void sendTradeOffers(int i, TraderOfferList traderofferlist, int j, int k, boolean flag, boolean flag1) {}
+    public void sendTradeOffers(int i, TraderOfferList traderofferlist, int j, int k, boolean flag, boolean flag1) {
+    }
 
-    public void openEditBookScreen(ItemStack itemstack, Hand hand) {}
+    public void openEditBookScreen(ItemStack itemstack, Hand hand) {
+    }
 
     public ActionResult interact(Entity entity, Hand hand) {
         if (this.isSpectator()) {
@@ -1155,9 +1214,11 @@
 
     }
 
-    public void addCritParticles(Entity entity) {}
+    public void addCritParticles(Entity entity) {
+    }
 
-    public void addEnchantedHitParticles(Entity entity) {}
+    public void addEnchantedHitParticles(Entity entity) {
+    }
 
     public void spawnSweepAttackParticles() {
         double d0 = (double) (-MathHelper.sin(this.yaw * 0.017453292F));
@@ -1237,7 +1298,8 @@
         return this.sleepTimer;
     }
 
-    public void sendMessage(Text text, boolean flag) {}
+    public void sendMessage(Text text, boolean flag) {
+    }
 
     public void incrementStat(Identifier identifier) {
         this.incrementStat(Stats.CUSTOM.getOrCreateStat(identifier));
@@ -1251,15 +1313,18 @@
         this.increaseStat(stat, 1);
     }
 
-    public void increaseStat(Stat<?> stat, int i) {}
+    public void increaseStat(Stat<?> stat, int i) {
+    }
 
-    public void resetStat(Stat<?> stat) {}
+    public void resetStat(Stat<?> stat) {
+    }
 
     public int unlockRecipes(Collection<Recipe<?>> collection) {
         return 0;
     }
 
-    public void unlockRecipes(Identifier[] aidentifier) {}
+    public void unlockRecipes(Identifier[] aidentifier) {
+    }
 
     public int lockRecipes(Collection<Recipe<?>> collection) {
         return 0;
@@ -1576,9 +1641,11 @@
         return !this.abilities.flying && (!this.onGround || !this.isSneaky());
     }
 
-    public void sendAbilitiesUpdate() {}
+    public void sendAbilitiesUpdate() {
+    }
 
-    public void setGameMode(GameMode gamemode) {}
+    public void setGameMode(GameMode gamemode) {
+    }
 
     public Text getName() {
         return new LiteralText(this.gameProfile.getName());
@@ -1612,7 +1679,7 @@
     }
 
     public Iterable<ItemStack> getItemsHand() {
-        return Lists.newArrayList((Object[])(this.getMainHandStack(), this.getOffHandStack()));
+        return Lists.newArrayList((Object[]) (this.getMainHandStack(), this.getOffHandStack()));
     }
 
     public Iterable<ItemStack> getArmorItems() {
