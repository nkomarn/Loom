--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -5,6 +5,7 @@
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
+
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Iterator;
@@ -15,6 +16,7 @@
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
 import net.minecraft.SharedConstants;
 import net.minecraft.advancement.criterion.Criteria;
 import net.minecraft.block.BedBlock;
@@ -105,11 +107,24 @@
 import net.minecraft.world.GameMode;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.util.CraftVector;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
 
 public abstract class PlayerEntity extends LivingEntity {
 
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
-    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    // CraftBukkit - decompile error
+    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.<EntityPose, EntityDimensions>builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
     private static final TrackedData<Float> ABSORPTION_AMOUNT = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.FLOAT);
     private static final TrackedData<Integer> SCORE = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.INTEGER);
     protected static final TrackedData<Byte> PLAYER_MODEL_PARTS = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.BYTE);
@@ -118,10 +133,10 @@
     protected static final TrackedData<CompoundTag> RIGHT_SHOULDER_ENTITY = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.TAG_COMPOUND);
     private long shoulderEntityAddedTime;
     public final PlayerInventory inventory = new PlayerInventory(this);
-    protected EnderChestInventory enderChestInventory = new EnderChestInventory();
+    protected EnderChestInventory enderChestInventory = new EnderChestInventory(this); // CraftBukkit - add "this" to constructor
     public final PlayerScreenHandler playerScreenHandler;
     public ScreenHandler currentScreenHandler;
-    protected HungerManager hungerManager = new HungerManager();
+    protected HungerManager hungerManager = new HungerManager(this); // CraftBukkit - add "this" to constructor
     protected int abilityResyncCountdown;
     public float prevStrideDistance;
     public float strideDistance;
@@ -147,6 +162,16 @@
     @Nullable
     public FishingBobberEntity fishHook;
 
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     public PlayerEntity(World world, BlockPos blockpos, GameProfile gameprofile) {
         super(EntityType.PLAYER, world);
         this.selectedItem = ItemStack.EMPTY;
@@ -282,7 +307,7 @@
         ItemStack itemstack = this.getEquippedStack(EquipmentSlot.HEAD);
 
         if (itemstack.getItem() == Items.TURTLE_HELMET && !this.isSubmergedIn(FluidTags.WATER)) {
-            this.addStatusEffect(new StatusEffectInstance(StatusEffects.WATER_BREATHING, 200, 0, false, false, true));
+            this.addStatusEffect(new StatusEffectInstance(StatusEffects.WATER_BREATHING, 200, 0, false, false, true), EntityPotionEffectEvent.Cause.TURTLE_HELMET); // CraftBukkit
         }
 
     }
@@ -399,7 +424,7 @@
         return SoundCategory.PLAYERS;
     }
 
-    protected int getBurningDuration() {
+    public int getBurningDuration() { // Loom - public access
         return 20;
     }
 
@@ -436,7 +461,8 @@
 
         if (this.world.getDifficulty() == Difficulty.PEACEFUL && this.world.getGameRules().getBoolean(GameRules.NATURAL_REGENERATION)) {
             if (this.getHealth() < this.getMaxHealth() && this.age % 20 == 0) {
-                this.heal(1.0F);
+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN);
             }
 
             if (this.hungerManager.isNotFull() && this.age % 10 == 0) {
@@ -617,6 +643,30 @@
                 itementity.setVelocity((double) (-f3 * f2 * 0.3F) + Math.cos((double) f5) * (double) f6, (double) (-f1 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (f4 * f2 * 0.3F) + Math.sin((double) f5) * (double) f6);
             }
 
+            // CraftBukkit start - fire PlayerDropItemEvent
+            Player player = (Player) this.getBukkitEntity();
+            Item drop = (Item) itementity.getBukkitEntity();
+
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            Bukkit.getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                if (flag1 && (cur == null || cur.getAmount() == 0)) {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                } else if (flag1 && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                } else {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+                return null;
+            }
+            // CraftBukkit end
+
             return itementity;
         }
     }
@@ -739,16 +789,17 @@
         if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else if (this.abilities.invulnerable && !damagesource.isOutOfWorld()) {
+            this.forceExplosionKnockback = true; // SPIGOT-5258 - Make invulnerable players get knockback from explosions
             return false;
         } else {
             this.despawnCounter = 0;
             if (this.isDead()) {
                 return false;
             } else {
-                this.dropShoulderEntities();
+                // this.dropShoulderEntities(); // CraftBukkit - moved down
                 if (damagesource.isScaledWithDifficulty()) {
                     if (this.world.getDifficulty() == Difficulty.PEACEFUL) {
-                        f = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (this.world.getDifficulty() == Difficulty.EASY) {
@@ -760,7 +811,13 @@
                     }
                 }
 
-                return f == 0.0F ? false : super.damage(damagesource, f);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.damage(damagesource, f);
+                if (damaged) {
+                    this.dropShoulderEntities();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -774,10 +831,29 @@
     }
 
     public boolean shouldDamagePlayer(PlayerEntity playerentity) {
-        AbstractTeam abstractteam = this.getScoreboardTeam();
-        AbstractTeam abstractteam1 = playerentity.getScoreboardTeam();
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (playerentity instanceof ServerPlayerEntity) {
+            ServerPlayerEntity thatPlayer = (ServerPlayerEntity) playerentity;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        } else {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = playerentity.world.getCraftServer().getOfflinePlayer(playerentity.getEntityName());
+            team = playerentity.world.getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
 
-        return abstractteam == null ? true : (!abstractteam.isEqual(abstractteam1) ? true : abstractteam.isFriendlyFireAllowed());
+        if (this instanceof ServerPlayerEntity) {
+            return !team.hasPlayer(((ServerPlayerEntity) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.world.getCraftServer().getOfflinePlayer(this.getEntityName()));
+        // CraftBukkit end
     }
 
     protected void damageArmor(DamageSource damagesource, float f) {
@@ -812,7 +888,12 @@
         }
     }
 
-    protected void applyDamage(DamageSource damagesource, float f) {
+    // CraftBukkit start
+    protected boolean applyDamage(DamageSource damagesource, float f) { // CraftBukkit - void -> boolean
+        if (true) {
+            return super.applyDamage(damagesource, f);
+        }
+        // CraftBukkit end
         if (!this.isInvulnerableTo(damagesource)) {
             f = this.applyArmorToDamage(damagesource, f);
             f = this.applyEnchantmentsToDamage(damagesource, f);
@@ -838,6 +919,7 @@
 
             }
         }
+        return false; // CraftBukkit
     }
 
     protected boolean isOnSoulSpeedBlock() {
@@ -987,7 +1069,7 @@
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.resetLastAttackedTicks();
+                // this.resetLastAttackedTicks(); // CraftBukkit - Moved to LivingEntity to reset the cooldown after the damage is dealt
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
@@ -1026,8 +1108,14 @@
                     if (entity instanceof LivingEntity) {
                         f3 = ((LivingEntity) entity).getHealth();
                         if (j > 0 && !entity.isOnFire()) {
+                            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 1);
+                            Bukkit.getPluginManager().callEvent(combustEvent);
+                            if (!combustEvent.isCancelled()) {
                             flag4 = true;
                             entity.setOnFireFor(1);
+                            }
+                            // CraftBukkit end
                         }
                     }
 
@@ -1055,8 +1143,11 @@
                                 LivingEntity livingentity = (LivingEntity) iterator.next();
 
                                 if (livingentity != this && livingentity != entity && !this.isTeammate(livingentity) && (!(livingentity instanceof ArmorStandEntity) || !((ArmorStandEntity) livingentity).isMarker()) && this.squaredDistanceTo((Entity) livingentity) < 9.0D) {
+                                    // CraftBukkit start - Only apply knockback if the damage hits
+                                    if (livingentity.damage(DamageSource.player(this).sweep(), f4)) {
                                     livingentity.takeKnockback(0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
-                                    livingentity.damage(DamageSource.player(this), f4);
+                                    }
+                                    // CraftBukkit end
                                 }
                             }
 
@@ -1065,9 +1156,25 @@
                         }
 
                         if (entity instanceof ServerPlayerEntity && entity.velocityModified) {
+                            // CraftBukkit start - Add Velocity Event
+                            boolean cancelled = false;
+                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
+
+                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                            Bukkit.getPluginManager().callEvent(event);
+                            if (event.isCancelled()) {
+                                cancelled = true;
+                            } else if (!velocity.equals(event.getVelocity())) {
+                                player.setVelocity(event.getVelocity());
+                            }
+
+                            if (!cancelled) {
                             ((ServerPlayerEntity) entity).networkHandler.sendPacket(new EntityVelocityUpdateS2CPacket(entity));
                             entity.velocityModified = false;
                             entity.setVelocity(vec3d);
+                            }
+                            // CraftBukkit end
                         }
 
                         if (flag2) {
@@ -1112,7 +1219,13 @@
 
                             this.increaseStat(Stats.DAMAGE_DEALT, Math.round(f5 * 10.0F));
                             if (j > 0) {
-                                entity.setOnFireFor(j * 4);
+                                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
+                                Bukkit.getPluginManager().callEvent(combustEvent);
+                                if (!combustEvent.isCancelled()) {
+                                    entity.setOnFireFor(combustEvent.getDuration(), false);
+                                }
+                                // CraftBukkit end
                             }
 
                             if (this.world instanceof ServerWorld && f5 > 2.0F) {
@@ -1128,6 +1241,12 @@
                         if (flag4) {
                             entity.extinguish();
                         }
+
+                        // CraftBukkit start - resync on cancelled event
+                        if (this instanceof ServerPlayerEntity) {
+                            ((ServerPlayerEntity) this).getBukkitEntity().updateInventory();
+                        }
+                        // CraftBukkit end
                     }
                 }
 
@@ -1186,17 +1305,40 @@
     }
 
     public Either<PlayerEntity.SleepFailureReason, Unit> trySleep(BlockPos blockpos) {
+        // CraftBukkit start
+        return this.trySleep(blockpos, false);
+    }
+
+    public Either<PlayerEntity.SleepFailureReason, Unit> trySleep(BlockPos blockpos, boolean force) {
+        // CraftBukkit end
         this.sleep(blockpos);
         this.sleepTimer = 0;
         return Either.right(Unit.INSTANCE);
     }
 
     public void wakeUp(boolean flag, boolean flag1) {
+        BlockPos bedpos = this.getSleepingPosition().orElse(null); // CraftBukkit
         super.wakeUp();
         if (this.world instanceof ServerWorld && flag1) {
             ((ServerWorld) this.world).updateSleepingPlayers();
         }
 
+        // CraftBukkit start - fire PlayerBedLeaveEvent
+        if (this.getBukkitEntity() instanceof Player) {
+            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed;
+
+            if (bedpos != null) {
+                bed = this.world.getCraftWorld().getBlockAt(bedpos.getX(), bedpos.getY(), bedpos.getZ());
+            } else {
+                bed = this.world.getCraftWorld().getBlockAt(player.getLocation());
+            }
+
+            PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
+            Bukkit.getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
+
         this.sleepTimer = flag ? 0 : 100;
     }
 
@@ -1303,7 +1445,11 @@
             this.setVelocity(vec3d2.x, d3 * 0.6D, vec3d2.z);
             this.flyingSpeed = f;
             this.fallDistance = 0.0F;
+            // CraftBukkit start
+            if (getFlag(7) && !org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
             this.setFlag(7, false);
+            }
+            // CraftBukkit end
         } else {
             super.travel(vec3d);
         }
@@ -1430,12 +1576,24 @@
     }
 
     public void startFallFlying() {
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
         this.setFlag(7, true);
+        } else {
+            // SPIGOT-5542: must toggle like below
+            this.setFlag(7, true);
+            this.setFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     public void stopFallFlying() {
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
         this.setFlag(7, true);
         this.setFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     protected void onSwimmingStart() {
@@ -1611,7 +1769,7 @@
     }
 
     public Iterable<ItemStack> getItemsHand() {
-        return Lists.newArrayList((Object[])(this.getMainHandStack(), this.getOffHandStack()));
+        return Lists.newArrayList(this.getMainHandStack(), this.getOffHandStack()); // Loom - decompile error
     }
 
     public Iterable<ItemStack> getArmorItems() {
@@ -1638,26 +1796,31 @@
 
     protected void dropShoulderEntities() {
         if (this.shoulderEntityAddedTime + 20L < this.world.getTime()) {
-            this.dropShoulderEntity(this.getShoulderEntityLeft());
-            this.setShoulderEntityLeft(new CompoundTag());
-            this.dropShoulderEntity(this.getShoulderEntityRight());
-            this.setShoulderEntityRight(new CompoundTag());
+            // CraftBukkit start
+            if (this.dropShoulderEntity(this.getShoulderEntityLeft())) {
+                this.setShoulderEntityLeft(new CompoundTag());
+            }
+
+            if (this.dropShoulderEntity(this.getShoulderEntityRight())) {
+                this.setShoulderEntityRight(new CompoundTag());
+            }
+            // CraftBukkit end
         }
 
     }
 
-    private void dropShoulderEntity(CompoundTag compoundtag) {
+    private boolean dropShoulderEntity(CompoundTag compoundtag) {  // CraftBukkit void->boolean
         if (!this.world.isClient && !compoundtag.isEmpty()) {
-            EntityType.getEntityFromTag(compoundtag, this.world).ifPresent((entity) -> {
+            return EntityType.getEntityFromTag(compoundtag, this.world).map((entity) -> { // CraftBukkit
                 if (entity instanceof TameableEntity) {
                     ((TameableEntity) entity).setOwnerUuid(this.uuid);
                 }
 
                 entity.updatePosition(this.getX(), this.getY() + 0.699999988079071D, this.getZ());
-                ((ServerWorld) this.world).tryLoadEntity(entity);
-            });
+                return ((ServerWorld) this.world).tryLoadEntity(entity, CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY); // CraftBukkit
+            }).orElse(true); // CraftBukkit
         }
-
+        return true; // CraftBukkit
     }
 
     public abstract boolean isSpectator();
