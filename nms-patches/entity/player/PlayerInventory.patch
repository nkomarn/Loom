--- a/net/minecraft/entity/player/PlayerInventory.java
+++ b/net/minecraft/entity/player/PlayerInventory.java
@@ -28,6 +28,13 @@
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class PlayerInventory implements Inventory, Nameable {
 
     public final DefaultedList<ItemStack> main;
@@ -64,6 +71,28 @@
         return itemstack.getItem() == itemstack1.getItem() && ItemStack.areTagsEqual(itemstack, itemstack1);
     }
 
+    // CraftBukkit start - Watch method above! :D
+    public int canHold(ItemStack itemstack) {
+        int remains = itemstack.getCount();
+        for (int i = 0; i < this.main.size(); ++i) {
+            ItemStack itemstack1 = this.getStack(i);
+            if (itemstack1.isEmpty()) return itemstack.getCount();
+
+            if (this.canStackAddMore(itemstack1, itemstack)) {
+                remains -= (itemstack1.getMaxCount() < this.getMaxStackSize() ? itemstack1.getMaxCount() : this.getMaxStackSize()) - itemstack1.getCount();
+            }
+            if (remains <= 0) return itemstack.getCount();
+        }
+        ItemStack offhandItemStack = this.getStack(this.main.size() + this.armor.size());
+        if (this.canStackAddMore(offhandItemStack, itemstack)) {
+            remains -= (offhandItemStack.getMaxCount() < this.getMaxStackSize() ? offhandItemStack.getMaxCount() : this.getMaxStackSize()) - offhandItemStack.getCount();
+        }
+        if (remains <= 0) return itemstack.getCount();
+
+        return itemstack.getCount() - remains;
+    }
+    // CraftBukkit end
+
     public int getEmptySlot() {
         for (int i = 0; i < this.main.size(); ++i) {
             if (((ItemStack) this.main.get(i)).isEmpty()) {
@@ -495,9 +524,10 @@
             for (int i = 0; i < this.armor.size(); ++i) {
                 ItemStack itemstack = (ItemStack) this.armor.get(i);
 
+                int finalI = i; // CraftBukkit - decompile error
                 if ((!damagesource.isFire() || !itemstack.getItem().isFireproof()) && itemstack.getItem() instanceof ArmorItem) {
                     itemstack.damage((int) f, (LivingEntity) this.player, (playerentity) -> {
-                        playerentity.sendEquipmentBreakStatus(EquipmentSlot.fromTypeIndex(EquipmentSlot.Type.ARMOR, i));
+                        playerentity.sendEquipmentBreakStatus(EquipmentSlot.fromTypeIndex(EquipmentSlot.Type.ARMOR, finalI)); // CraftBukkit - decompile error
                     });
                 }
             }
@@ -532,6 +562,11 @@
     }
 
     public ItemStack getCursorStack() {
+        // CraftBukkit start
+        if (this.cursorStack.isEmpty()) {
+            this.setCursorStack(ItemStack.EMPTY);
+        }
+        // CraftBukkit end
         return this.cursorStack;
     }
 
@@ -587,4 +622,52 @@
         }
 
     }
+
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        List<ItemStack> combined = new ArrayList<ItemStack>(main.size() + armor.size() + offHand.size());
+        for (List<ItemStack> sub : this.combinedInventory) {
+            combined.addAll(sub);
+        }
+
+        return combined;
+    }
+
+    public List<ItemStack> getArmorContents() {
+        return this.armor;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        return this.player.getBukkitEntity();
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return player.getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
 }
