--- a/net/minecraft/entity/passive/HorseBaseEntity.java
+++ b/net/minecraft/entity/passive/HorseBaseEntity.java
@@ -64,6 +64,10 @@
 import net.minecraft.world.LocalDifficulty;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldAccess;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.AbstractHorse;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.HorseJumpEvent;
 
 public abstract class HorseBaseEntity extends AnimalEntity implements InventoryChangedListener, JumpingMount, Saddleable {
 
@@ -92,6 +96,7 @@
     private float lastEatingAnimationProgress;
     protected boolean playExtraHorseSounds = true;
     protected int soundTicks;
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected HorseBaseEntity(EntityType<? extends HorseBaseEntity> entitytype, World world) {
         super(entitytype, world);
@@ -267,7 +272,7 @@
     protected void onChestedStatusChanged() {
         SimpleInventory simpleinventory = this.items;
 
-        this.items = new SimpleInventory(this.getInventorySize());
+        this.items = new SimpleInventory(this.getInventorySize(), (AbstractHorse) this.getBukkitEntity()); // CraftBukkit
         if (simpleinventory != null) {
             simpleinventory.removeListener(this);
             int i = Math.min(simpleinventory.size(), this.items.size());
@@ -377,7 +382,7 @@
     }
 
     public int getMaxTemper() {
-        return 100;
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     protected float getSoundVolume() {
@@ -446,7 +451,7 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+            this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
@@ -518,7 +523,7 @@
         super.tickMovement();
         if (!this.world.isClient && this.isAlive()) {
             if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                this.heal(1.0F);
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
             if (this.eatsGrass()) {
@@ -753,6 +758,8 @@
             compoundtag.putUuid("Owner", this.getOwnerUuid());
         }
 
+        compoundtag.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
+
         if (!this.items.getStack(0).isEmpty()) {
             compoundtag.put("SaddleItem", this.items.getStack(0).toTag(new CompoundTag()));
         }
@@ -779,6 +786,12 @@
             this.setOwnerUuid(uuid);
         }
 
+        // CraftBukkit start
+        if (compoundtag.contains("Bukkit.MaxDomestication")) {
+            this.maxDomestication = compoundtag.getInt("Bukkit.MaxDomestication");
+        }
+        // CraftBukkit end
+
         if (compoundtag.contains("SaddleItem", 10)) {
             ItemStack itemstack = ItemStack.fromTag(compoundtag.getCompound("SaddleItem"));
 
@@ -824,6 +837,19 @@
     }
 
     public void startJumping(int i) {
+        // CraftBukkit start
+        float power;
+        if (i >= 90) {
+            power = 1.0F;
+        } else {
+            power = 0.4F + 0.4F * (float) i / 90.0F;
+        }
+
+        HorseJumpEvent event = CraftEventFactory.callHorseJumpEvent(this, power);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
         this.jumping = true;
         this.updateAnger();
         this.playJumpSound();
