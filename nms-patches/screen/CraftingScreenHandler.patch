--- a/net/minecraft/screen/CraftingScreenHandler.java
+++ b/net/minecraft/screen/CraftingScreenHandler.java
@@ -18,13 +18,20 @@
 import net.minecraft.server.network.ServerPlayerEntity;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class CraftingScreenHandler extends AbstractRecipeScreenHandler<CraftingInventory> {
 
     private final CraftingInventory input;
     private final CraftingResultInventory result;
-    private final ScreenHandlerContext context;
+    public final ScreenHandlerContext context; // Loom - public access
     private final PlayerEntity player;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private PlayerInventory playerinventory;
+    // CraftBukkit end
 
     public CraftingScreenHandler(int i, PlayerInventory playerinventory) {
         this(i, playerinventory, ScreenHandlerContext.EMPTY);
@@ -32,8 +39,12 @@
 
     public CraftingScreenHandler(int i, PlayerInventory playerinventory, ScreenHandlerContext screenhandlercontext) {
         super(ScreenHandlerType.CRAFTING, i);
-        this.input = new CraftingInventory(this, 3, 3);
+        // CraftBukkit start - Switched order of IInventory construction and stored player
         this.result = new CraftingResultInventory();
+        this.input = new CraftingInventory(this, 3, 3, playerinventory.player); // CraftBukkit - pass player
+        this.input.resultInventory = this.result;
+        this.playerinventory = playerinventory;
+        // CraftBukkit end
         this.context = screenhandlercontext;
         this.player = playerinventory.player;
         this.addSlot(new CraftingResultSlot(playerinventory.player, this.input, this.result, 0, 124, 35));
@@ -59,7 +70,7 @@
 
     }
 
-    protected static void updateResult(int i, World world, PlayerEntity playerentity, CraftingInventory craftinginventory, CraftingResultInventory craftingresultinventory) {
+    protected static void updateResult(int i, World world, PlayerEntity playerentity, CraftingInventory craftinginventory, CraftingResultInventory craftingresultinventory, ScreenHandler screenhandler) { // CraftBukkit
         if (!world.isClient) {
             ServerPlayerEntity serverplayerentity = (ServerPlayerEntity) playerentity;
             ItemStack itemstack = ItemStack.EMPTY;
@@ -72,6 +83,7 @@
                     itemstack = craftingrecipe.craft(craftinginventory);
                 }
             }
+            itemstack = CraftEventFactory.callPreCraftEvent(craftinginventory, craftingresultinventory, itemstack, screenhandler.getBukkitView(), false); // CraftBukkit
 
             craftingresultinventory.setStack(0, itemstack);
             serverplayerentity.networkHandler.sendPacket(new ScreenHandlerSlotUpdateS2CPacket(i, 0, itemstack));
@@ -80,7 +92,7 @@
 
     public void onContentChanged(Inventory inventory) {
         this.context.run((world, blockpos) -> {
-            updateResult(this.syncId, world, this.player, this.input, this.result);
+            updateResult(this.syncId, world, this.player, this.input, this.result, this);
         });
     }
 
@@ -105,6 +117,7 @@
     }
 
     public boolean canUse(PlayerEntity playerentity) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return canUse(this.context, playerentity, Blocks.CRAFTING_TABLE);
     }
 
@@ -174,4 +187,17 @@
     public int getCraftingHeight() {
         return this.input.getHeight();
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.input, this.result);
+        bukkitEntity = new CraftInventoryView(this.playerinventory.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
