--- a/net/minecraft/screen/ScreenHandler.java
+++ b/net/minecraft/screen/ScreenHandler.java
@@ -1,10 +1,10 @@
 package net.minecraft.screen;
 
+import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
+
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.entity.BlockEntity;
@@ -12,17 +12,26 @@
 import net.minecraft.entity.player.PlayerInventory;
 import net.minecraft.inventory.Inventory;
 import net.minecraft.item.ItemStack;
+import net.minecraft.network.packet.s2c.play.ScreenHandlerSlotUpdateS2CPacket;
 import net.minecraft.screen.slot.Slot;
 import net.minecraft.screen.slot.SlotActionType;
 import net.minecraft.server.network.ServerPlayerEntity;
+import net.minecraft.text.Text;
 import net.minecraft.util.collection.DefaultedList;
 import net.minecraft.util.crash.CrashException;
 import net.minecraft.util.crash.CrashReport;
 import net.minecraft.util.crash.CrashReportSection;
-import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.world.World;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryView;
 
 public abstract class ScreenHandler {
 
@@ -38,6 +47,29 @@
     private final List<ScreenHandlerListener> listeners = Lists.newArrayList();
     private final Set<PlayerEntity> restrictedPlayers = Sets.newHashSet();
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+    public abstract InventoryView getBukkitView();
+    public void transferTo(ScreenHandler other, CraftHumanEntity player) {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+        ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+        ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+        ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+    }
+
+    private Text title;
+    public final Text getTitle() {
+        Preconditions.checkState(this.title != null, "Title not set");
+        return this.title;
+    }
+
+    public final void setTitle(Text title) {
+        Preconditions.checkState(this.title == null, "Title already set");
+        this.title = title;
+    }
+    // CraftBukkit end
+
     protected ScreenHandler(@Nullable ScreenHandlerType<?> screenhandlertype, int i) {
         this.type = screenhandlertype;
         this.syncId = i;
@@ -219,6 +251,7 @@
                     k = playerinventory.getCursorStack().getCount();
                     Iterator iterator = this.quickCraftSlots.iterator();
 
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
                         ItemStack itemstack3 = playerinventory.getCursorStack();
@@ -234,12 +267,53 @@
                             }
 
                             k -= itemstack4.getCount() - j1;
-                            slot1.setStack(itemstack4);
+                            //slot1.setStack(itemstack4);
+                            draggedSlots.put(slot1.id, itemstack4); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
-                    itemstack2.setCount(k);
-                    playerinventory.setCursorStack(itemstack2);
+                    //itemstack2.setCount(k);
+                    //playerinventory.setCursorStack(itemstack2);
+
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack2);
+                    newcursor.setAmount(k);
+
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<>();
+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+                    }
+
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = playerinventory.getCursorStack();
+                    playerinventory.setCursorStack(CraftItemStack.asNMSCopy(newcursor));
+
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickCraftStage == 1, eventmap);
+                    Bukkit.getPluginManager().callEvent(event);
+
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Event.Result.DEFAULT;
+
+                    if (event.getResult() != Event.Result.DENY) {
+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (playerinventory.getCursorStack() != null) {
+                            playerinventory.setCursorStack(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        } else {
+                            playerinventory.setCursorStack(oldCursor);
+                        }
+                    }
+
+                    if (needsUpdate && playerentity instanceof ServerPlayerEntity) {
+                        ((ServerPlayerEntity) playerentity).openHandledScreen(this);
+                    }
+                    // CraftBukkit end
                 }
 
                 this.endQuickCraft();
@@ -256,8 +330,12 @@
                 if (i == -999) {
                     if (!playerinventory.getCursorStack().isEmpty()) {
                         if (j == 0) {
-                            playerentity.dropItem(playerinventory.getCursorStack(), true);
+                            //playerentity.dropItem(playerinventory.getCursorStack(), true);
+                            // CraftBukkit start
+                            ItemStack carried = playerinventory.getCursorStack();
                             playerinventory.setCursorStack(ItemStack.EMPTY);
+                            playerentity.dropItem(carried, true);
+                            // CraftBukkit end
                         }
 
                         if (j == 1) {
@@ -345,6 +423,15 @@
                         }
 
                         slot2.markDirty();
+                        // CraftBukkit start - Make sure the client has the right slot contents
+                        if (playerentity instanceof ServerPlayerEntity && slot2.getMaxStackAmount() != 64) {
+                            ((ServerPlayerEntity) playerentity).networkHandler.sendPacket(new ScreenHandlerSlotUpdateS2CPacket(this.syncId, slot2.id, slot2.getStack()));
+                            // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                            if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING) {
+                                ((ServerPlayerEntity) playerentity).networkHandler.sendPacket(new ScreenHandlerSlotUpdateS2CPacket(this.syncId, 0, this.getSlot(0).getStack()));
+                            }
+                        }
+                        // CraftBukkit end
                     }
                 }
             } else if (slotactiontype == SlotActionType.SWAP) {
@@ -447,8 +534,11 @@
         PlayerInventory playerinventory = playerentity.inventory;
 
         if (!playerinventory.getCursorStack().isEmpty()) {
-            playerentity.dropItem(playerinventory.getCursorStack(), false);
+            // CraftBukkit start - SPIGOT-4556
+            ItemStack carried = playerinventory.getCursorStack();
             playerinventory.setCursorStack(ItemStack.EMPTY);
+            playerentity.dropItem(carried, false);
+            // CraftBukkit end
         }
 
     }
